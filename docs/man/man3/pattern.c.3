.TH "src/pattern.c" 3 "Sun Mar 19 2023" "Version 1.0.0-alpha" "Libembroidery" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/pattern.c
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include 'embroidery_internal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBEmbPattern\fP * \fBembPattern_create\fP (void)"
.br
.ti -1c
.RI "void \fBembPattern_hideStitchesOverLength\fP (\fBEmbPattern\fP *p, int length)"
.br
.ti -1c
.RI "int \fBembPattern_addThread\fP (\fBEmbPattern\fP *pattern, \fBEmbThread\fP thread)"
.br
.ti -1c
.RI "void \fBembPattern_fixColorCount\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_copystitch_listToPolylines\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_copyPolylinesTostitch_list\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_movestitch_listToPolylines\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_movePolylinesTostitch_list\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_addStitchAbs\fP (\fBEmbPattern\fP *p, \fBEmbReal\fP x, \fBEmbReal\fP y, int flags, int isAutoColorIndex)"
.br
.ti -1c
.RI "void \fBembPattern_addStitchRel\fP (\fBEmbPattern\fP *p, \fBEmbReal\fP dx, \fBEmbReal\fP dy, int flags, int isAutoColorIndex)"
.br
.ti -1c
.RI "void \fBembPattern_changeColor\fP (\fBEmbPattern\fP *p, int index)"
.br
.ti -1c
.RI "void \fBembPattern_scale\fP (\fBEmbPattern\fP *p, \fBEmbReal\fP scale)"
.br
.ti -1c
.RI "\fBEmbRect\fP \fBembPattern_calcBoundingBox\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_flipHorizontal\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_flipVertical\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_flip\fP (\fBEmbPattern\fP *p, int horz, int vert)"
.br
.ti -1c
.RI "void \fBembPattern_combineJumpStitches\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_correctForMaxStitchLength\fP (\fBEmbPattern\fP *p, \fBEmbReal\fP maxStitchLength, \fBEmbReal\fP maxJumpLength)"
.br
.ti -1c
.RI "void \fBembPattern_center\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_loadExternalColorFile\fP (\fBEmbPattern\fP *p, const char *fileName)"
.br
.ti -1c
.RI "void \fBembPattern_free\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "void \fBembPattern_addCircleAbs\fP (\fBEmbPattern\fP *p, \fBEmbCircle\fP circle)"
.br
.ti -1c
.RI "void \fBembPattern_addEllipseAbs\fP (\fBEmbPattern\fP *p, \fBEmbEllipse\fP ellipse)"
.br
.ti -1c
.RI "void \fBembPattern_addLineAbs\fP (\fBEmbPattern\fP *p, \fBEmbLine\fP line)"
.br
.ti -1c
.RI "void \fBembPattern_addPathAbs\fP (\fBEmbPattern\fP *p, \fBEmbPath\fP obj)"
.br
.ti -1c
.RI "void \fBembPattern_addPointAbs\fP (\fBEmbPattern\fP *p, \fBEmbPoint\fP obj)"
.br
.ti -1c
.RI "void \fBembPattern_addPolygonAbs\fP (\fBEmbPattern\fP *p, \fBEmbPolygon\fP obj)"
.br
.ti -1c
.RI "void \fBembPattern_addPolylineObjectAbs\fP (\fBEmbPattern\fP *p, \fBEmbPolyline\fP obj)"
.br
.ti -1c
.RI "void \fBembPattern_addRectAbs\fP (\fBEmbPattern\fP *p, \fBEmbRect\fP rect)"
.br
.ti -1c
.RI "void \fBembPattern_end\fP (\fBEmbPattern\fP *p)"
.br
.ti -1c
.RI "int \fBembPattern_color_count\fP (\fBEmbPattern\fP *pattern, \fBEmbColor\fP startColor)"
.br
.ti -1c
.RI "void \fBembPattern_designDetails\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "int \fBconvert\fP (const char *inf, const char *outf)"
.br
.ti -1c
.RI "float \fBembPattern_totalStitchLength\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "float \fBembPattern_minimumStitchLength\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "float \fBembPattern_maximumStitchLength\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "void \fBembPattern_lengthHistogram\fP (\fBEmbPattern\fP *pattern, int *bin, int NUMBINS)"
.br
.ti -1c
.RI "int \fBembPattern_realStitches\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "int \fBembPattern_jumpStitches\fP (\fBEmbPattern\fP *pattern)"
.br
.ti -1c
.RI "int \fBembPattern_trimStitches\fP (\fBEmbPattern\fP *pattern)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int convert (const char * inf, const char * outf)"

.PP
Definition at line \fB1108\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addCircleAbs (\fBEmbPattern\fP * p, \fBEmbCircle\fP circle)"
Adds a circle object to pattern (\fIp\fP) with its center at the absolute position (\fIcx\fP,\fIcy\fP) with a radius of (\fIr\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB787\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addEllipseAbs (\fBEmbPattern\fP * p, \fBEmbEllipse\fP ellipse)"
Adds an ellipse object to pattern (\fIp\fP) with its center at the absolute position (\fIcx\fP,\fIcy\fP) with radii of (\fIrx\fP,\fIry\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB801\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addLineAbs (\fBEmbPattern\fP * p, \fBEmbLine\fP line)"
Adds a line object to pattern (\fIp\fP) starting at the absolute position (\fIx1\fP,\fIy1\fP) and ending at the absolute position (\fIx2\fP,\fIy2\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB816\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addPathAbs (\fBEmbPattern\fP * p, \fBEmbPath\fP obj)"

.PP
Definition at line \fB827\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addPointAbs (\fBEmbPattern\fP * p, \fBEmbPoint\fP obj)"
Adds a point object to pattern (\fIp\fP) at the absolute position (\fIx\fP,\fIy\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB843\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addPolygonAbs (\fBEmbPattern\fP * p, \fBEmbPolygon\fP obj)"

.PP
Definition at line \fB854\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addPolylineObjectAbs (\fBEmbPattern\fP * p, \fBEmbPolyline\fP obj)"

.PP
Definition at line \fB869\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addRectAbs (\fBEmbPattern\fP * p, \fBEmbRect\fP rect)"
Adds a rectangle object to pattern (\fIp\fP) at the absolute position (\fIx\fP,\fIy\fP) with a width of (\fIw\fP) and a height of (\fIh\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB888\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addStitchAbs (\fBEmbPattern\fP * p, \fBEmbReal\fP x, \fBEmbReal\fP y, int flags, int isAutoColorIndex)"
Adds a stitch to the pattern (\fIp\fP) at the absolute position (\fIx\fP,\fIy\fP)\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB236\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_addStitchRel (\fBEmbPattern\fP * p, \fBEmbReal\fP dx, \fBEmbReal\fP dy, int flags, int isAutoColorIndex)"
Adds a stitch to the pattern (\fIp\fP) at the relative position (\fIdx\fP,\fIdy\fP) to the previous stitch\&. Positive y is up\&. Units are in millimeters\&. 
.PP
Definition at line \fB290\fP of file \fBpattern\&.c\fP\&.
.SS "int embPattern_addThread (\fBEmbPattern\fP * pattern, \fBEmbThread\fP thread)"

.PP
Definition at line \fB66\fP of file \fBpattern\&.c\fP\&.
.SS "\fBEmbRect\fP embPattern_calcBoundingBox (\fBEmbPattern\fP * p)"
Returns an EmbRect that encapsulates all stitches and objects in the pattern (\fIp\fP)\&. 
.PP
Definition at line \fB340\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_center (\fBEmbPattern\fP * p)"

.PP
Definition at line \fB709\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_changeColor (\fBEmbPattern\fP * p, int index)"

.PP
Definition at line \fB312\fP of file \fBpattern\&.c\fP\&.
.SS "int embPattern_color_count (\fBEmbPattern\fP * pattern, \fBEmbColor\fP startColor)"

.PP
Definition at line \fB911\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_combineJumpStitches (\fBEmbPattern\fP * p)"

.PP
Definition at line \fB624\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_copyPolylinesTostitch_list (\fBEmbPattern\fP * p)"
Copies all of the EmbPolylineObjectList data to Embstitch_list data for pattern (\fIp\fP)\&. 
.PP
Definition at line \fB161\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_copystitch_listToPolylines (\fBEmbPattern\fP * p)"
Copies all of the Embstitch_list data to EmbPolylineObjectList data for pattern (\fIp\fP)\&. 
.PP
Definition at line \fB114\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_correctForMaxStitchLength (\fBEmbPattern\fP * p, \fBEmbReal\fP maxStitchLength, \fBEmbReal\fP maxJumpLength)"

.PP
Definition at line \fB660\fP of file \fBpattern\&.c\fP\&.
.SS "\fBEmbPattern\fP * embPattern_create (void)"
Returns a pointer to an EmbPattern\&. It is created on the heap\&. The caller is responsible for freeing the allocated memory with \fBembPattern_free()\fP\&. 
.PP
Definition at line \fB21\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_designDetails (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB942\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_end (\fBEmbPattern\fP * p)"

.PP
Definition at line \fB898\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_fixColorCount (\fBEmbPattern\fP * p)"

.PP
Definition at line \fB79\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_flip (\fBEmbPattern\fP * p, int horz, int vert)"
Flips the entire pattern (\fIp\fP) horizontally about the x-axis if (\fIhorz\fP) is true\&. Flips the entire pattern (\fIp\fP) vertically about the y-axis if (\fIvert\fP) is true\&. 
.PP
Definition at line \fB497\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_flipHorizontal (\fBEmbPattern\fP * p)"
Flips the entire pattern (\fIp\fP) horizontally about the y-axis\&. 
.PP
Definition at line \fB472\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_flipVertical (\fBEmbPattern\fP * p)"
Flips the entire pattern (\fIp\fP) vertically about the x-axis\&. 
.PP
Definition at line \fB484\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_free (\fBEmbPattern\fP * p)"
Frees all memory allocated in the pattern (\fIp\fP)\&. 
.PP
Definition at line \fB771\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_hideStitchesOverLength (\fBEmbPattern\fP * p, int length)"

.PP
Definition at line \fB42\fP of file \fBpattern\&.c\fP\&.
.SS "int embPattern_jumpStitches (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1240\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_lengthHistogram (\fBEmbPattern\fP * pattern, int * bin, int NUMBINS)"

.PP
Definition at line \fB1205\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_loadExternalColorFile (\fBEmbPattern\fP * p, const char * fileName)"

.PP
Definition at line \fB732\fP of file \fBpattern\&.c\fP\&.
.SS "float embPattern_maximumStitchLength (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1184\fP of file \fBpattern\&.c\fP\&.
.SS "float embPattern_minimumStitchLength (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1163\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_movePolylinesTostitch_list (\fBEmbPattern\fP * p)"
Moves all of the EmbPolylineObjectList data to Embstitch_list data for pattern (\fIp\fP)\&. 
.PP
Definition at line \fB225\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_movestitch_listToPolylines (\fBEmbPattern\fP * p)"
Moves all of the Embstitch_list data to EmbPolylineObjectList data for pattern (\fIp\fP)\&. 
.PP
Definition at line \fB211\fP of file \fBpattern\&.c\fP\&.
.SS "int embPattern_realStitches (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1227\fP of file \fBpattern\&.c\fP\&.
.SS "void embPattern_scale (\fBEmbPattern\fP * p, \fBEmbReal\fP scale)"

.PP
Definition at line \fB324\fP of file \fBpattern\&.c\fP\&.
.SS "float embPattern_totalStitchLength (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1143\fP of file \fBpattern\&.c\fP\&.
.SS "int embPattern_trimStitches (\fBEmbPattern\fP * pattern)"

.PP
Definition at line \fB1254\fP of file \fBpattern\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Libembroidery from the source code\&.
