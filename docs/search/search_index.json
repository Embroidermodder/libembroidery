{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"libembroidery What is libembroidery? libembroidery aims to be a low-level library for reading, writing, and programmatically manipulating digital embroidery files, available to in many different programming languages. Currently, libembroidery is the underlying library that is used by Embroidermodder 2 and is developed by the Embroidermodder team. It handles over 45 different embroidery specific formats as well as several non-embroidery specific vector formats. It also includes a CLI called embroider that allows for better automation of changes to embroidery files and will be more up-to date than the Embroidermodder 2 GUI. Build libembroidery and EmbroiderModder 2 use CMake builds so if you are building the project to use as a library we recommend: git clone https://github.com/Embroidermodder/libembroidery cd libembroidery mkdir build cd build cmake .. cmake --build . This builds both the static and shared versions of the library as well as the command line program embroider . License Libembroidery is distributed under the permissive zlib licence, see the LICENSE file.","title":"Overview"},{"location":"#libembroidery","text":"","title":"libembroidery "},{"location":"#what-is-libembroidery","text":"libembroidery aims to be a low-level library for reading, writing, and programmatically manipulating digital embroidery files, available to in many different programming languages. Currently, libembroidery is the underlying library that is used by Embroidermodder 2 and is developed by the Embroidermodder team. It handles over 45 different embroidery specific formats as well as several non-embroidery specific vector formats. It also includes a CLI called embroider that allows for better automation of changes to embroidery files and will be more up-to date than the Embroidermodder 2 GUI.","title":"What is libembroidery?"},{"location":"#build","text":"libembroidery and EmbroiderModder 2 use CMake builds so if you are building the project to use as a library we recommend: git clone https://github.com/Embroidermodder/libembroidery cd libembroidery mkdir build cd build cmake .. cmake --build . This builds both the static and shared versions of the library as well as the command line program embroider .","title":"Build"},{"location":"#license","text":"Libembroidery is distributed under the permissive zlib licence, see the LICENSE file.","title":"License"},{"location":"contributing/","text":"Contributing Version Control Being an open source project, developers can grab the latest code at any time and attempt to build it themselves. We try our best to ensure that it will build smoothly at any time, although occasionally we do break the build. In these instances, please provide a patch, pull request which fixes the issue or open an issue and notify us of the problem, as we may not be aware of it and we can build fine. Try to group commits based on what they are related to: features/bugs/comments/graphics/commands/etc... See the coding style here","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#version-control","text":"Being an open source project, developers can grab the latest code at any time and attempt to build it themselves. We try our best to ensure that it will build smoothly at any time, although occasionally we do break the build. In these instances, please provide a patch, pull request which fixes the issue or open an issue and notify us of the problem, as we may not be aware of it and we can build fine. Try to group commits based on what they are related to: features/bugs/comments/graphics/commands/etc... See the coding style here","title":"Version Control"},{"location":"libembroidery_style/","text":"libembroidery Coding Standards A basic set of guidelines to use when submitting code. Naming Conventions Name variables and functions intelligently to minimize the need for comments. It should be immediately obvious what information it represents. Short names such as x and y are fine when referring to coordinates. Short names such as i and j are fine when doing loops. Variable names should be \"camelCase\", starting with a lowercase word followed by uppercase word(s). C++ Class Names should be \"CamelCase\", using all uppercase word(s). C Functions that attempt to simulate namespacing, should be \"nameSpace_camelCase\". All files and directories shall be lowercase and contain no spaces. Code Style Tabs should not be used when indenting. Setup your IDE or text editor to use 4 spaces. Braces For functions: please put each brace on a new line. void function_definition(int argument) { } For control statements: please put the first brace on the same line. if (condition) { } Use exceptions sparingly. Do not use ternary operator (?:) in place of if/else. Do not repeat a variable name that already occurs in an outer scope. Comments When writing code, sometimes there are items that we know can be improved, incomplete or need special clarification. In these cases, use the types of comments shown below. They are pretty standard and are highlighted by many editors to make reviewing code easier. We also use shell scripts to parse the code to find all of these occurrences so someone wanting to go on a bug hunt will be able to easily see which areas of the code need more love. //C++ Style Comments //TODO: This code clearly needs more work or further review. //BUG: This code is definitely wrong. It needs fixed. //HACK: This code shouldn't be written this way or I don't feel right about it. There may a better solution. //WARNING: Think twice (or more times) before changing this code. I put this here for a good reason. //NOTE: This comment is much more important than lesser comments. libembroidery is written in C and adheres to C89 standards. This means that any C99 or C++ comments will show up as errors when compiling with gcc. In any C code, you must use: /* C Style Comments */ /* TODO: This code clearly needs more work or further review. */ /* BUG: This code is definitely wrong. It needs fixed. */ /* HACK: This code shouldn't be written this way or I don't feel right about it. There may a better solution */ /* WARNING: Think twice (or more times) before changing this code. I put this here for a good reason. */ /* NOTE: This comment is much more important than lesser comments. */","title":"Style Guide"},{"location":"libembroidery_style/#libembroidery-coding-standards","text":"A basic set of guidelines to use when submitting code.","title":"libembroidery Coding Standards"},{"location":"libembroidery_style/#naming-conventions","text":"Name variables and functions intelligently to minimize the need for comments. It should be immediately obvious what information it represents. Short names such as x and y are fine when referring to coordinates. Short names such as i and j are fine when doing loops. Variable names should be \"camelCase\", starting with a lowercase word followed by uppercase word(s). C++ Class Names should be \"CamelCase\", using all uppercase word(s). C Functions that attempt to simulate namespacing, should be \"nameSpace_camelCase\". All files and directories shall be lowercase and contain no spaces.","title":"Naming Conventions"},{"location":"libembroidery_style/#code-style","text":"Tabs should not be used when indenting. Setup your IDE or text editor to use 4 spaces.","title":"Code Style"},{"location":"libembroidery_style/#braces","text":"For functions: please put each brace on a new line. void function_definition(int argument) { } For control statements: please put the first brace on the same line. if (condition) { } Use exceptions sparingly. Do not use ternary operator (?:) in place of if/else. Do not repeat a variable name that already occurs in an outer scope.","title":"Braces"},{"location":"libembroidery_style/#comments","text":"When writing code, sometimes there are items that we know can be improved, incomplete or need special clarification. In these cases, use the types of comments shown below. They are pretty standard and are highlighted by many editors to make reviewing code easier. We also use shell scripts to parse the code to find all of these occurrences so someone wanting to go on a bug hunt will be able to easily see which areas of the code need more love. //C++ Style Comments //TODO: This code clearly needs more work or further review. //BUG: This code is definitely wrong. It needs fixed. //HACK: This code shouldn't be written this way or I don't feel right about it. There may a better solution. //WARNING: Think twice (or more times) before changing this code. I put this here for a good reason. //NOTE: This comment is much more important than lesser comments. libembroidery is written in C and adheres to C89 standards. This means that any C99 or C++ comments will show up as errors when compiling with gcc. In any C code, you must use: /* C Style Comments */ /* TODO: This code clearly needs more work or further review. */ /* BUG: This code is definitely wrong. It needs fixed. */ /* HACK: This code shouldn't be written this way or I don't feel right about it. There may a better solution */ /* WARNING: Think twice (or more times) before changing this code. I put this here for a good reason. */ /* NOTE: This comment is much more important than lesser comments. */","title":"Comments"},{"location":"formats/100_format/","text":"","title":"100 format"},{"location":"formats/10o_format/","text":"","title":"10o format"},{"location":"formats/art_format/","text":"","title":"Art format"},{"location":"formats/bmc_format/","text":"","title":"Bmc format"},{"location":"formats/bro_format/","text":"","title":"Bro format"},{"location":"formats/cnd_format/","text":"","title":"Cnd format"},{"location":"formats/col_format/","text":"","title":"Col format"},{"location":"formats/csd_format/","text":"","title":"Csd format"},{"location":"formats/csv_format/","text":"","title":"Csv format"},{"location":"formats/dat_format/","text":"","title":"Dat format"},{"location":"formats/dem_format/","text":"","title":"Dem format"},{"location":"formats/dsb_format/","text":"","title":"Dsb format"},{"location":"formats/dst_format/","text":"","title":"Dst format"},{"location":"formats/dsz_format/","text":"","title":"Dsz format"},{"location":"formats/dxf_format/","text":"","title":"Dxf format"},{"location":"formats/edr_format/","text":"","title":"Edr format"},{"location":"formats/emd_format/","text":"","title":"Emd format"},{"location":"formats/exp_format/","text":"","title":"Exp format"},{"location":"formats/exy_format/","text":"","title":"Exy format"},{"location":"formats/eys_format/","text":"","title":"Eys format"},{"location":"formats/fxy_format/","text":"","title":"Fxy format"},{"location":"formats/gnc_format/","text":"","title":"Gnc format"},{"location":"formats/gt_format/","text":"","title":"Gt format"},{"location":"formats/hus_format/","text":"","title":"Hus format"},{"location":"formats/inb_format/","text":"","title":"Inb format"},{"location":"formats/inf_format/","text":"","title":"Inf format"},{"location":"formats/jef_format/","text":"","title":"Jef format"},{"location":"formats/ksm_format/","text":"","title":"Ksm format"},{"location":"formats/max_format/","text":"","title":"Max format"},{"location":"formats/mit_format/","text":"","title":"Mit format"},{"location":"formats/new_format/","text":"","title":"New format"},{"location":"formats/ofm_format/","text":"","title":"Ofm format"},{"location":"formats/overview/","text":"Toyota Embroidery Format (.100) Toyota Embroidery Format (.10o) Bernina Embroidery Format (.art) Bitmap Cache Embroidery Format (.bmc) Bits and Volts Embroidery Format (.bro) Melco Embroidery Format (.cnd) Embroidery Thread Color Format (.col) Singer Embroidery Format (.csd) Comma Separated Values (.csv) Barudan Embroidery Format (.dat) Melco Embroidery Format (.dem) Barudan Embroidery Format (.dsb) Tajima Embroidery Format (.dst) ZSK USA Embroidery Format (.dsz) Drawing Exchange Format (.dxf) Embird Embroidery Format (.edr) Elna Embroidery Format (.emd) Melco Embroidery Format (.exp) Eltac Embroidery Format (.exy) Sierra Expanded Embroidery Format (.eys) Fortron Embroidery Format (.fxy) Smoothie G-Code Embroidery Format (.fxy) Great Notions Embroidery Format (.gnc) Gold Thread Embroidery Format (.gt) Husqvarna Viking Embroidery Format (.hus) Inbro Embroidery Format (.inb) Embroidery Color Format (.inf) Janome Embroidery Format (.jef) Pfaff Embroidery Format (.ksm) Pfaff Embroidery Format (.max) Mitsubishi Embroidery Format (.mit) Ameco Embroidery Format (.new) Melco Embroidery Format (.ofm) Pfaff Embroidery Format (.pcd) Pfaff Embroidery Format (.pcm) Pfaff Embroidery Format (.pcq) Pfaff Embroidery Format (.pcs) Brother Embroidery Format (.pec) Brother Embroidery Format (.pel) Brother Embroidery Format (.pem) Brother Embroidery Format (.pes) Brother Embroidery Format (.phb) Brother Embroidery Format (.phc) AutoCAD Embroidery Format (.plt) RGB Embroidery Format (.rgb) Janome Embroidery Format (.sew) Husqvarna Viking Embroidery Format (.shv) Sunstar Embroidery Format (.sst) Data Stitch Embroidery Format (.stx) Scalable Vector Graphics (.svg) Pfaff Embroidery Format (.t01) Pfaff Embroidery Format (.t09) Happy Embroidery Format (.tap) ThredWorks Embroidery Format (.thr) Text File (.txt) Barudan Embroidery Format (.u00) Barudan Embroidery Format (.u01) Pfaff Embroidery Format (.vip) Pfaff Embroidery Format (.vp3) Singer Embroidery Format (.xxx) ZSK USA Embroidery Format (.zsk)","title":"Overview"},{"location":"formats/pcd_format/","text":"","title":"Pcd format"},{"location":"formats/pcm_format/","text":"","title":"Pcm format"},{"location":"formats/pcq_format/","text":"","title":"Pcq format"},{"location":"formats/pcs_format/","text":"","title":"Pcs format"},{"location":"formats/pec_format/","text":"","title":"Pec format"},{"location":"formats/pel_format/","text":"","title":"Pel format"},{"location":"formats/pem_format/","text":"","title":"Pem format"},{"location":"formats/pes_format/","text":"","title":"Pes format"},{"location":"formats/phb_format/","text":"","title":"Phb format"},{"location":"formats/phc_format/","text":"","title":"Phc format"},{"location":"formats/plt_format/","text":"","title":"Plt format"},{"location":"formats/rgb_format/","text":"","title":"Rgb format"},{"location":"formats/sew_format/","text":"","title":"Sew format"},{"location":"formats/shv_format/","text":"","title":"Shv format"},{"location":"formats/sst_format/","text":"","title":"Sst format"},{"location":"formats/stx_format/","text":"","title":"Stx format"},{"location":"formats/svg_format/","text":"","title":"Svg format"},{"location":"formats/t01_format/","text":"","title":"T01 format"},{"location":"formats/t09_format/","text":"","title":"T09 format"},{"location":"formats/tap_format/","text":"","title":"Tap format"},{"location":"formats/thr_format/","text":"","title":"Thr format"},{"location":"formats/txt_format/","text":"","title":"Txt format"},{"location":"formats/u00_format/","text":"","title":"U00 format"},{"location":"formats/u01_format/","text":"","title":"U01 format"},{"location":"formats/vip_format/","text":"","title":"Vip format"},{"location":"formats/vp3_format/","text":"","title":"Vp3 format"},{"location":"formats/xxx_format/","text":"","title":"Xxx format"},{"location":"formats/zsk_format/","text":"","title":"Zsk format"}]}