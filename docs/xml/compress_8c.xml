<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="compress_8c" kind="file" language="C++">
    <compoundname>compress.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="embroidery__internal_8h" local="yes">embroidery_internal.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/compress.c</label>
        <link refid="compress_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>embroidery.h</label>
        <link refid="embroidery_8h"/>
      </node>
      <node id="5">
        <label>embroidery_internal.h</label>
        <link refid="embroidery__internal_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="compress_8c_1af0a0646ec730d0abdffced84a07f845e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int huffman_lookup_data[2]</definition>
        <argsstring>[2]</argsstring>
        <name>huffman_lookup_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="85" column="5" bodyfile="src/compress.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="compress_8c_1a053addffe32629b6727073e9c499cc32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hus_compress</definition>
        <argsstring>(char *data, int length, char *output, int *output_length)</argsstring>
        <name>hus_compress</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="44" column="5" bodyfile="src/compress.c" bodystart="44" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void huffman_build_table</definition>
        <argsstring>(huffman *h)</argsstring>
        <name>huffman_build_table</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a8ad0df962f28b81981b3b0b7f04ebb17" kindref="member">huffman</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="60" column="6" bodyfile="src/compress.c" bodystart="60" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int * huffman_lookup</definition>
        <argsstring>(huffman h, int byte_lookup)</argsstring>
        <name>huffman_lookup</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a8ad0df962f28b81981b3b0b7f04ebb17" kindref="member">huffman</ref></type>
          <declname>h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>byte_lookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="87" column="5" bodyfile="src/compress.c" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1ac2630b57677982cec1d413de85c262fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compress_init</definition>
        <argsstring>()</argsstring>
        <name>compress_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="101" column="6" bodyfile="src/compress.c" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1aed62fb2531905dbb3a075afb3912c50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_get_bits</definition>
        <argsstring>(compress *c, int length)</argsstring>
        <name>compress_get_bits</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="106" column="5" bodyfile="src/compress.c" bodystart="106" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1af511532a8a7f9f6646379e8fbb472331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_pop</definition>
        <argsstring>(compress *c, int bit_count)</argsstring>
        <name>compress_pop</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="131" column="5" bodyfile="src/compress.c" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_peek</definition>
        <argsstring>(compress *c, int bit_count)</argsstring>
        <name>compress_peek</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bit_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="138" column="5" bodyfile="src/compress.c" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1afb74b97766d1968313b6e637032e9686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_read_variable_length</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_read_variable_length</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="143" column="5" bodyfile="src/compress.c" bodystart="143" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1aa237ee1cf527ebb720fccf48495179e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compress_load_character_length_huffman</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_load_character_length_huffman</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="162" column="6" bodyfile="src/compress.c" bodystart="162" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a39e722c76e45536e81a47b35c349eb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compress_load_character_huffman</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_load_character_huffman</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="184" column="6" bodyfile="src/compress.c" bodystart="184" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a7830b6991ed529226a1a7252d29b401e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compress_load_distance_huffman</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_load_distance_huffman</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="215" column="6" bodyfile="src/compress.c" bodystart="215" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a58b1553ebfc0984e0d9ef74bcbb14c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compress_load_block</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_load_block</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="231" column="6" bodyfile="src/compress.c" bodystart="231" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a8a9394d4a8d2bd617070539667405633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_get_token</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_get_token</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="239" column="5" bodyfile="src/compress.c" bodystart="239" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1a61b95342f1dbd1e438079d87b3837da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compress_get_position</definition>
        <argsstring>(compress *c)</argsstring>
        <name>compress_get_position</name>
        <param>
          <type><ref refid="embroidery__internal_8h_1a0a1ded23c1c333067bcfb59d5b83ce2a" kindref="member">compress</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="251" column="5" bodyfile="src/compress.c" bodystart="251" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="compress_8c_1aa5370ff498be6c8a440bb0a581c2ed5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hus_decompress</definition>
        <argsstring>(char *data, int length, char *output, int *output_length)</argsstring>
        <name>hus_decompress</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/compress.c" line="264" column="5" bodyfile="src/compress.c" bodystart="264" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>libembroidery.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018-2022<sp/>The<sp/>Embroidermodder<sp/>Team</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>zlib<sp/>license.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>all<sp/>the<sp/>read<sp/>and<sp/>write<sp/>functions<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>library.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*******************************************************************</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>Thanks<sp/>to<sp/>Jason<sp/>Weiler<sp/>for<sp/>describing<sp/>the<sp/>binary<sp/>formats<sp/>of<sp/>the<sp/>HUS<sp/>and</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>VIP<sp/>formats<sp/>at:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>http://www.jasonweiler.com/HUSandVIPFileFormatInfo.html</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/>Further<sp/>thanks<sp/>to<sp/>github<sp/>user<sp/>tatarize<sp/>for<sp/>solving<sp/>the<sp/>mystery<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/>compression<sp/>in:</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/>https://github.com/EmbroidePy/pyembroidery</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>with<sp/>a<sp/>description<sp/>of<sp/>that<sp/>work<sp/>here:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>https://stackoverflow.com/questions/7852670/greenleaf-archive-library</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>is<sp/>based<sp/>on<sp/>their<sp/>work.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="embroidery__internal_8h" kindref="compound">embroidery_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>work<sp/>in<sp/>progress.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>---------------------------</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>avoids<sp/>the<sp/>now<sp/>unnecessary<sp/>compression<sp/>by<sp/>placing<sp/>a</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>minimal<sp/>header<sp/>of<sp/>6<sp/>bytes<sp/>and<sp/>using<sp/>only<sp/>literals<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>huffman<sp/>compressed<sp/>part<sp/>(see<sp/>the<sp/>sources<sp/>above).</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="compress_8c_1a053addffe32629b6727073e9c499cc32" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a053addffe32629b6727073e9c499cc32" kindref="member">hus_compress</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*output_length)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)output;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>a[0]<sp/>=<sp/>length%256;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>a[1]<sp/>=<sp/>(length/256)%256;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>a[2]<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>a[3]<sp/>=<sp/>0xA0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>a[4]<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>a[5]<sp/>=<sp/>0xFE;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(output+6,<sp/>data,<sp/>length);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>*output_length<sp/>=<sp/>length+6;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>next<sp/>2<sp/>functions<sp/>represent<sp/>the<sp/>Huffman<sp/>class<sp/>in<sp/>tartarize&apos;s<sp/>code.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" kindref="member">huffman_build_table</ref>(<ref refid="struct_huffman" kindref="compound">huffman</ref><sp/>*h)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_length,<sp/>i,<sp/>max_length,<sp/>size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>max_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>h-&gt;<ref refid="struct_huffman_1ad3e7e75009104b66e7455c12eec7986a" kindref="member">table_width</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>h-&gt;<ref refid="struct_huffman_1ad3e7e75009104b66e7455c12eec7986a" kindref="member">table_width</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i]<sp/>&gt;<sp/>max_length)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_length<sp/>=<sp/>h-&gt;<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bit_length=1;<sp/>bit_length&lt;=h-&gt;<ref refid="struct_huffman_1ad3e7e75009104b66e7455c12eec7986a" kindref="member">table_width</ref>;<sp/>bit_length++)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>h-&gt;<ref refid="struct_huffman_1a21f1bd20236f85738f2fe88782e0bbf2" kindref="member">nlengths</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[j]<sp/>==<sp/>bit_length)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k&lt;size;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_huffman_1a45876a2bc205d017b2a4d1e66644c390" kindref="member">table</ref>[h-&gt;<ref refid="struct_huffman_1aeb804b35c86ac6c54c34e72c84b182af" kindref="member">ntable</ref>+k]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;<ref refid="struct_huffman_1aeb804b35c86ac6c54c34e72c84b182af" kindref="member">ntable</ref>++;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="compress_8c_1af0a0646ec730d0abdffced84a07f845e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1af0a0646ec730d0abdffced84a07f845e" kindref="member">huffman_lookup_data</ref>[2];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" kindref="member">huffman_lookup</ref>(<ref refid="struct_huffman" kindref="compound">huffman</ref><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_lookup)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out<sp/>=<sp/><ref refid="compress_8c_1af0a0646ec730d0abdffced84a07f845e" kindref="member">huffman_lookup_data</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h.<ref refid="struct_huffman_1ad3e7e75009104b66e7455c12eec7986a" kindref="member">table_width</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>h.<ref refid="struct_huffman_1a82cbea818dc861959eccbe67d971a1fe" kindref="member">default_value</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>h.<ref refid="struct_huffman_1a45876a2bc205d017b2a4d1e66644c390" kindref="member">table</ref>[byte_lookup<sp/>&gt;&gt;<sp/>(16-h.<ref refid="struct_huffman_1ad3e7e75009104b66e7455c12eec7986a" kindref="member">table_width</ref>)];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>h.<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[out[0]];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>These<sp/>functions<sp/>represent<sp/>the<sp/>EmbCompress<sp/>class.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="compress_8c_1ac2630b57677982cec1d413de85c262fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1ac2630b57677982cec1d413de85c262fd" kindref="member">compress_init</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="compress_8c_1aed62fb2531905dbb3a075afb3912c50e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1aed62fb2531905dbb3a075afb3912c50e" kindref="member">compress_get_bits</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>end_pos_in_bits,<sp/>start_pos_in_bytes,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_pos_in_bytes,<sp/>value,<sp/>mask_sample_bits,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unused_bits,<sp/>original;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>end_pos_in_bits<sp/>=<sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>+<sp/>length<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>start_pos_in_bytes<sp/>=<sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>end_pos_in_bytes<sp/>=<sp/>end_pos_in_bits<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=start_pos_in_bytes;<sp/>i<sp/>&lt;<sp/>end_pos_in_bytes+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>c-&gt;<ref refid="struct_compress_1aef51813d994b02af22f9303c398c2f1a" kindref="member">input_length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>|=<sp/>(c-&gt;<ref refid="struct_compress_1a7774b2ee169ce1208e518dc2f2037c9e" kindref="member">input_data</ref>[i])<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>unused_bits<sp/>=<sp/>(7<sp/>-<sp/>end_pos_in_bits)<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_sample_bits<sp/>=<sp/>(1&lt;&lt;length)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>original<sp/>=<sp/>(value<sp/>&gt;&gt;<sp/>unused_bits)<sp/>&amp;<sp/>mask_sample_bits;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>original;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_count)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="compress_8c_1aed62fb2531905dbb3a075afb3912c50e" kindref="member">compress_get_bits</ref>(c,<sp/>bit_count);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>+=<sp/>bit_count;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" kindref="member">compress_peek</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_count)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1aed62fb2531905dbb3a075afb3912c50e" kindref="member">compress_get_bits</ref>(c,<sp/>bit_count);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="compress_8c_1afb74b97766d1968313b6e637032e9686" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1afb74b97766d1968313b6e637032e9686" kindref="member">compress_read_variable_length</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/>m,<sp/>s;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>3);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m!=7)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q&lt;13;<sp/>q++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m++;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="compress_8c_1aa237ee1cf527ebb720fccf48495179e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1aa237ee1cf527ebb720fccf48495179e1" kindref="member">compress_load_character_length_huffman</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>5);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ad3066fa4993e64bca6b198368120c9ee" kindref="member">character_length_huffman</ref>.<ref refid="struct_huffman_1a82cbea818dc861959eccbe67d971a1fe" kindref="member">default_value</ref><sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>5);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ad3066fa4993e64bca6b198368120c9ee" kindref="member">character_length_huffman</ref>.<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==3)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>2);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ad3066fa4993e64bca6b198368120c9ee" kindref="member">character_length_huffman</ref>.<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i]<sp/>=<sp/><ref refid="compress_8c_1afb74b97766d1968313b6e637032e9686" kindref="member">compress_read_variable_length</ref>(c);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" kindref="member">huffman_build_table</ref>(&amp;(c-&gt;<ref refid="struct_compress_1ad3066fa4993e64bca6b198368120c9ee" kindref="member">character_length_huffman</ref>));</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="compress_8c_1a39e722c76e45536e81a47b35c349eb79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a39e722c76e45536e81a47b35c349eb79" kindref="member">compress_load_character_huffman</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>9);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ac16161ccff5b711c1434bd5489e1de19" kindref="member">character_huffman</ref>.<ref refid="struct_huffman_1a82cbea818dc861959eccbe67d971a1fe" kindref="member">default_value</ref><sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>9);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*h<sp/>=<sp/><ref refid="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" kindref="member">huffman_lookup</ref>(c-&gt;<ref refid="struct_compress_1ad3066fa4993e64bca6b198368120c9ee" kindref="member">character_length_huffman</ref>,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" kindref="member">compress_peek</ref>(c,<sp/>16));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>+=<sp/>h[1];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[0]==0)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>h[0];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[0]==1)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>3<sp/>+<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>4);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[0]==2)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>20<sp/>+<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>9);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ac16161ccff5b711c1434bd5489e1de19" kindref="member">character_huffman</ref>.<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i]<sp/>=<sp/>h[0]<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" kindref="member">huffman_build_table</ref>(&amp;(c-&gt;<ref refid="struct_compress_1ac16161ccff5b711c1434bd5489e1de19" kindref="member">character_huffman</ref>));</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="compress_8c_1a7830b6991ed529226a1a7252d29b401e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a7830b6991ed529226a1a7252d29b401e" kindref="member">compress_load_distance_huffman</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>5);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1af199d5674b9caf756107179917c4cfd7" kindref="member">distance_huffman</ref>.<ref refid="struct_huffman_1a82cbea818dc861959eccbe67d971a1fe" kindref="member">default_value</ref><sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>5);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1af199d5674b9caf756107179917c4cfd7" kindref="member">distance_huffman</ref>.<ref refid="struct_huffman_1a3612239e49acda829e2ea44fb152b20f" kindref="member">lengths</ref>[i]<sp/>=<sp/><ref refid="compress_8c_1afb74b97766d1968313b6e637032e9686" kindref="member">compress_read_variable_length</ref>(c);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a7e5d1d3488d7124ab020287e2606f89d" kindref="member">huffman_build_table</ref>(&amp;(c-&gt;<ref refid="struct_compress_1af199d5674b9caf756107179917c4cfd7" kindref="member">distance_huffman</ref>));</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231" refid="compress_8c_1a58b1553ebfc0984e0d9ef74bcbb14c0c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a58b1553ebfc0984e0d9ef74bcbb14c0c" kindref="member">compress_load_block</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a6fb52e18112b3bf43f37ff13cbbcdd69" kindref="member">block_elements</ref><sp/>=<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>16);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1aa237ee1cf527ebb720fccf48495179e1" kindref="member">compress_load_character_length_huffman</ref>(c);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a39e722c76e45536e81a47b35c349eb79" kindref="member">compress_load_character_huffman</ref>(c);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a7830b6991ed529226a1a7252d29b401e" kindref="member">compress_load_distance_huffman</ref>(c);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="compress_8c_1a8a9394d4a8d2bd617070539667405633" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a8a9394d4a8d2bd617070539667405633" kindref="member">compress_get_token</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*h;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;<ref refid="struct_compress_1a6fb52e18112b3bf43f37ff13cbbcdd69" kindref="member">block_elements</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compress_8c_1a58b1553ebfc0984e0d9ef74bcbb14c0c" kindref="member">compress_load_block</ref>(c);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a6fb52e18112b3bf43f37ff13cbbcdd69" kindref="member">block_elements</ref>--;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" kindref="member">huffman_lookup</ref>(c-&gt;<ref refid="struct_compress_1ac16161ccff5b711c1434bd5489e1de19" kindref="member">character_huffman</ref>,<sp/><ref refid="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" kindref="member">compress_peek</ref>(c,<sp/>16));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>+=<sp/>h[1];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h[0];</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="compress_8c_1a61b95342f1dbd1e438079d87b3837da6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1a61b95342f1dbd1e438079d87b3837da6" kindref="member">compress_get_position</ref>(<ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*h,<sp/>v;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/><ref refid="compress_8c_1a04af50a7e18d0e4d85ae76c7c4bd80d9" kindref="member">huffman_lookup</ref>(c-&gt;<ref refid="struct_compress_1af199d5674b9caf756107179917c4cfd7" kindref="member">distance_huffman</ref>,<sp/><ref refid="compress_8c_1aaeb1b13beaf29fad4611aca96a32b499" kindref="member">compress_peek</ref>(c,<sp/>16));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>+=<sp/>h[1];</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h[0]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>h[0]<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(1&lt;&lt;v)<sp/>+<sp/><ref refid="compress_8c_1af511532a8a7f9f6646379e8fbb472331" kindref="member">compress_pop</ref>(c,<sp/>v);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="compress_8c_1aa5370ff498be6c8a440bb0a581c2ed5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="compress_8c_1aa5370ff498be6c8a440bb0a581c2ed5c" kindref="member">hus_decompress</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*output_length)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>character,<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_compress" kindref="compound">compress</ref><sp/>*c<sp/>=<sp/>(<ref refid="struct_compress" kindref="compound">compress</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_compress" kindref="compound">compress</ref>));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7774b2ee169ce1208e518dc2f2037c9e" kindref="member">input_data</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1aef51813d994b02af22f9303c398c2f1a" kindref="member">input_length</ref><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1ad50d882ccd6bdba3b212cd2bf07e776b" kindref="member">bits_total</ref><sp/>=<sp/>length*8;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c-&gt;<ref refid="struct_compress_1ad50d882ccd6bdba3b212cd2bf07e776b" kindref="member">bits_total</ref><sp/>&gt;<sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>*output_length)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>process<sp/>token<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>character<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>fix<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(character<sp/>&lt;<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/>(char)character;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(character<sp/>==<sp/>510)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>character<sp/>-<sp/>253;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>sure<sp/>about<sp/>i<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref><sp/>=<sp/>i<sp/>-<sp/><ref refid="compress_8c_1a61b95342f1dbd1e438079d87b3837da6" kindref="member">compress_get_position</ref>(c)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=c-&gt;<ref refid="struct_compress_1a7fc66c34d9a88dba42a8db1345d409bd" kindref="member">bit_position</ref>;<sp/>j<sp/>&lt;<sp/>c-&gt;bit_position+length;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[i]<sp/>=<sp/>output[j];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>free(c);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/compress.c"/>
  </compounddef>
</doxygen>
