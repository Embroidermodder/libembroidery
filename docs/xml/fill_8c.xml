<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="fill_8c" kind="file" language="C++">
    <compoundname>fill.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="embroidery__internal_8h" local="yes">embroidery_internal.h</includes>
    <incdepgraph>
      <node id="7">
        <label>embroidery.h</label>
        <link refid="embroidery_8h"/>
      </node>
      <node id="6">
        <label>embroidery_internal.h</label>
        <link refid="embroidery__internal_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/fill.c</label>
        <link refid="fill_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="fill_8c_1add6424b0861a4e44ac11fc4cbf99d1d1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* rules[]</definition>
        <argsstring>[]</argsstring>
        <name>rules</name>
        <initializer>= {&quot;+BF-AFA-FB+&quot;, &quot;-AF+BFB+FA-&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="20" column="12" bodyfile="src/fill.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="fill_8c_1a6e10b231de6baafee918b26f004d7327" prot="public" static="no" mutable="no">
        <type><ref refid="embroidery_8h_1a914404401c03a6bf0dac814661ba370c" kindref="member">L_system</ref></type>
        <definition>L_system hilbert_curve_l_system</definition>
        <argsstring></argsstring>
        <name>hilbert_curve_l_system</name>
        <initializer>= {
    &apos;A&apos;, &quot;AB&quot;, &quot;F+-&quot;, (char**)<ref refid="fill_8c_1add6424b0861a4e44ac11fc4cbf99d1d1" kindref="member">rules</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="22" column="10" bodyfile="src/fill.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fill_8c_1af27a83a237ef6302cbfb5af534229e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lindenmayer_system</definition>
        <argsstring>(L_system L, char *state, int iterations, int complete)</argsstring>
        <name>lindenmayer_system</name>
        <param>
          <type><ref refid="embroidery_8h_1a914404401c03a6bf0dac814661ba370c" kindref="member">L_system</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>int</type>
          <declname>complete</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="27" column="5" bodyfile="src/fill.c" bodystart="27" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a0fd47c53d468e3e5590e096495acac79" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void join_short_stitches</definition>
        <argsstring>(int *points, int *n_points, int width, int tolerence)</argsstring>
        <name>join_short_stitches</name>
        <param>
          <type>int *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n_points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tolerence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="85" column="1" bodyfile="src/fill.c" bodystart="85" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1adc8683886c723530102d2b75f14b6dbd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>static int * threshold_method</definition>
        <argsstring>(EmbImage *image, int *n_points, int subsample_width, int subsample_height, int threshold)</argsstring>
        <name>threshold_method</name>
        <param>
          <type><ref refid="embroidery_8h_1a907d23c2268eff84b7c5146b2add1bb4" kindref="member">EmbImage</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n_points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subsample_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subsample_height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="115" column="1" bodyfile="src/fill.c" bodystart="115" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a5d43a4168ef00fcb9221321b4508c8c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void greedy_algorithm</definition>
        <argsstring>(int *points, int n_points, int width, EmbReal bias)</argsstring>
        <name>greedy_algorithm</name>
        <param>
          <type>int *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref></type>
          <declname>bias</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="150" column="1" bodyfile="src/fill.c" bodystart="150" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1af65a5f7a682322a9588066dfc9d3e10d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void save_points_to_pattern</definition>
        <argsstring>(EmbPattern *pattern, int *points, int n_points, EmbReal scale, int width, int height)</argsstring>
        <name>save_points_to_pattern</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>points</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_points</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref></type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="190" column="1" bodyfile="src/fill.c" bodystart="190" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a51526002a19f07437ee07f4c6d475690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_horizontal_fill</definition>
        <argsstring>(EmbPattern *pattern, EmbImage *image, int threshhold)</argsstring>
        <name>embPattern_horizontal_fill</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a907d23c2268eff84b7c5146b2add1bb4" kindref="member">EmbImage</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshhold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="212" column="1" bodyfile="src/fill.c" bodystart="212" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1aadaaf644936dbeeb4286a00c4fe04794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_crossstitch</definition>
        <argsstring>(EmbPattern *pattern, EmbImage *image, int threshhold)</argsstring>
        <name>embPattern_crossstitch</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a907d23c2268eff84b7c5146b2add1bb4" kindref="member">EmbImage</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshhold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="239" column="1" bodyfile="src/fill.c" bodystart="239" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a2f0cd5118998e9310252de0bd11c6fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hilbert_curve</definition>
        <argsstring>(EmbPattern *pattern, int iterations)</argsstring>
        <name>hilbert_curve</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="268" column="1" bodyfile="src/fill.c" bodystart="268" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1ad02b5d945eacff708d2bf084c40044d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void generate_dragon_curve</definition>
        <argsstring>(char *state, int iterations)</argsstring>
        <name>generate_dragon_curve</name>
        <param>
          <type>char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="324" column="6" bodyfile="src/fill.c" bodystart="324" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a9f15f9548d56044f41aa91dd103c3914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dragon_curve</definition>
        <argsstring>(int iterations)</argsstring>
        <name>dragon_curve</name>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="345" column="5" bodyfile="src/fill.c" bodystart="345" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1accb8d958755abb87ae8fe5cb64241c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPolygon_reduceByDistance</definition>
        <argsstring>(EmbArray *vertices, EmbArray *simplified, float distance)</argsstring>
        <name>embPolygon_reduceByDistance</name>
        <param>
          <type><ref refid="embroidery_8h_1aebe8b1561a59d167cfe6613863a671ca" kindref="member">EmbArray</ref> *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1aebe8b1561a59d167cfe6613863a671ca" kindref="member">EmbArray</ref> *</type>
          <declname>simplified</declname>
        </param>
        <param>
          <type>float</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="805" column="6" bodyfile="src/fill.c" bodystart="805" bodyend="829" declfile="src/fill.c" declline="797" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1aa25158aa39b36f6981756295d6601910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPolygon_reduceByNth</definition>
        <argsstring>(EmbArray *vertices, EmbArray *out, int nth)</argsstring>
        <name>embPolygon_reduceByNth</name>
        <param>
          <type><ref refid="embroidery_8h_1aebe8b1561a59d167cfe6613863a671ca" kindref="member">EmbArray</ref> *</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1aebe8b1561a59d167cfe6613863a671ca" kindref="member">EmbArray</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="835" column="6" bodyfile="src/fill.c" bodystart="835" bodyend="849" declfile="src/fill.c" declline="798" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1aa629adadc7956aab2bfd8b0de7ccdd54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
        <definition>EmbPattern * embPattern_combine</definition>
        <argsstring>(EmbPattern *p1, EmbPattern *p2)</argsstring>
        <name>embPattern_combine</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="854" column="1" bodyfile="src/fill.c" bodystart="854" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a8e048d8296a5178c1188ca70ee2256e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchArc</definition>
        <argsstring>(EmbPattern *p, EmbArc arc, int thread_index, int style)</argsstring>
        <name>embPattern_stitchArc</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a09945e6e919629c5787e61582c712ba1" kindref="member">EmbArc</ref></type>
          <declname>arc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="875" column="1" bodyfile="src/fill.c" bodystart="875" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a4927287166f2a0abbc7b482ff4054a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchCircle</definition>
        <argsstring>(EmbPattern *p, EmbCircle circle, int thread_index, int style)</argsstring>
        <name>embPattern_stitchCircle</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a87fc13ccd4dbaa7de7c85efde17bba0e" kindref="member">EmbCircle</ref></type>
          <declname>circle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="881" column="1" bodyfile="src/fill.c" bodystart="881" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a63bc84e4406e59c092a2e076afedf930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchEllipse</definition>
        <argsstring>(EmbPattern *p, EmbEllipse ellipse, int thread_index, int style)</argsstring>
        <name>embPattern_stitchEllipse</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a4e48ebde5bd4d82b875f98b347bdd62c" kindref="member">EmbEllipse</ref></type>
          <declname>ellipse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="933" column="1" bodyfile="src/fill.c" bodystart="933" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a130b4030da774600c6005183dabb2d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchPath</definition>
        <argsstring>(EmbPattern *p, EmbPath rect, int thread_index, int style)</argsstring>
        <name>embPattern_stitchPath</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1af29045dfeebafdcb66d114b390c4a686" kindref="member">EmbPath</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="939" column="1" bodyfile="src/fill.c" bodystart="939" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a6e95b120116c16767cecbd2284ce1e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchPolygon</definition>
        <argsstring>(EmbPattern *p, EmbPolygon rect, int thread_index, int style)</argsstring>
        <name>embPattern_stitchPolygon</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1a2d6988a5f4ba24d26c7eff65dbc9d029" kindref="member">EmbPolygon</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="945" column="1" bodyfile="src/fill.c" bodystart="945" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a18bde39bfa17dfb7fe07137d62260e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchPolyline</definition>
        <argsstring>(EmbPattern *p, EmbPolyline rect, int thread_index, int style)</argsstring>
        <name>embPattern_stitchPolyline</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1ab5563c868d8f8174d5be764808a647dd" kindref="member">EmbPolyline</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="951" column="1" bodyfile="src/fill.c" bodystart="951" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1ae38ddde615726bba5070a6b17ce6d018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchRect</definition>
        <argsstring>(EmbPattern *p, EmbRect rect, int thread_index, int style)</argsstring>
        <name>embPattern_stitchRect</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1ac2f33b151fc40a0da3b14379aa0ec653" kindref="member">EmbRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="957" column="1" bodyfile="src/fill.c" bodystart="957" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1a908f6c41318183bcfceebdd9b646dc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_stitchText</definition>
        <argsstring>(EmbPattern *p, EmbRect rect, int thread_index, int style)</argsstring>
        <name>embPattern_stitchText</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="embroidery_8h_1ac2f33b151fc40a0da3b14379aa0ec653" kindref="member">EmbRect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="982" column="1" bodyfile="src/fill.c" bodystart="982" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="fill_8c_1ad948b1ae6e42c31b1a020348bedddfab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void embPattern_convertGeometry</definition>
        <argsstring>(EmbPattern *p)</argsstring>
        <name>embPattern_convertGeometry</name>
        <param>
          <type><ref refid="embroidery_8h_1a168c2ed6c7e17dd1aa7755aabc1db314" kindref="member">EmbPattern</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/fill.c" line="987" column="1" bodyfile="src/fill.c" bodystart="987" bodyend="1019"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>libembroidery.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018-2022<sp/>The<sp/>Embroidermodder<sp/>Team</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>zlib<sp/>license.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>all<sp/>the<sp/>read<sp/>and<sp/>write<sp/>functions<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>library.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>FILL<sp/>ALGORITHMS</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="embroidery__internal_8h" kindref="compound">embroidery_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="fill_8c_1add6424b0861a4e44ac11fc4cbf99d1d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="fill_8c_1add6424b0861a4e44ac11fc4cbf99d1d1" kindref="member">rules</ref>[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;+BF-AFA-FB+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-AF+BFB+FA-&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="fill_8c_1a6e10b231de6baafee918b26f004d7327" refkind="member"><highlight class="normal"><ref refid="struct_l_s_y_s_t_e_m" kindref="compound">L_system</ref><sp/><ref refid="fill_8c_1a6e10b231de6baafee918b26f004d7327" kindref="member">hilbert_curve_l_system</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AB&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;F+-&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<ref refid="fill_8c_1add6424b0861a4e44ac11fc4cbf99d1d1" kindref="member">rules</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>slow<sp/>generation<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="embroidery_8h_1a37ecaa3f785f905f33e2f22a3e925907" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1af27a83a237ef6302cbfb5af534229e10" kindref="member">lindenmayer_system</ref>(<ref refid="struct_l_s_y_s_t_e_m" kindref="compound">L_system</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>complete)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>know<sp/>that<sp/>the<sp/>full<sp/>length<sp/>of<sp/>the<sp/>curve<sp/>has<sp/>to<sp/>fit<sp/>within</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>number<sp/>of<sp/>stitches<sp/>and<sp/>we<sp/>can<sp/>cancel<sp/>consecutive<sp/>+-,<sp/>-+</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>etc.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">Potential<sp/>reference:</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment">@book{Prusinkiewicz1996Mar,</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>author<sp/>=<sp/>{Prusinkiewicz,<sp/>Przemyslaw<sp/>and<sp/>Lindenmayer,<sp/>Aristid<sp/>and<sp/>Hanan,<sp/>J.<sp/>S.<sp/>and<sp/>Fracchia,<sp/>F.<sp/>D.<sp/>and<sp/>Fowler,<sp/>D.<sp/>R.<sp/>and<sp/>de<sp/>Boer,<sp/>M.<sp/>J.<sp/>M.<sp/>and<sp/>Mercer,<sp/>L.},</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>{{The<sp/>Algorithmic<sp/>Beauty<sp/>of<sp/>Plants<sp/>(The<sp/>Virtual<sp/>Laboratory)}},</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>year<sp/>=<sp/>{1996},</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>month<sp/>=<sp/>{Mar},</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>publisher<sp/>=<sp/>{Springer}</highlight></codeline>
<codeline lineno="42"><highlight class="comment">}</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_state;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complete<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[0]<sp/>=<sp/>L.<ref refid="struct_l_s_y_s_t_e_m_1ae513c35eeae639f970cb8ec81f067963" kindref="member">axiom</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1af27a83a237ef6302cbfb5af534229e10" kindref="member">lindenmayer_system</ref>(L,<sp/>state,<sp/>iterations,<sp/>complete+1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>new_state<sp/>=<sp/>state<sp/>+<sp/><ref refid="embroidery_8h_1af33a320a7e31d42c7fbb3e3796bd5b41" kindref="member">MAX_STITCHES</ref>*5;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>new_state[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>replace<sp/>letters<sp/>using<sp/>rules<sp/>by<sp/>copying<sp/>to<sp/>new_state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)strlen(state);<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[j]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>state[j]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(new_state,<sp/>L.<ref refid="struct_l_s_y_s_t_e_m_1a9798541de208c99bb426e1bf9d1bd0eb" kindref="member">rules</ref>[state[j]-</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[j]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(new_state,<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[j]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(new_state,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[j]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(new_state,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(state,<sp/>new_state,<sp/>strlen(new_state)+1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complete<sp/>&lt;<sp/>iterations)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1af27a83a237ef6302cbfb5af534229e10" kindref="member">lindenmayer_system</ref>(L,<sp/>state,<sp/>iterations,<sp/>complete+1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove<sp/>points<sp/>that<sp/>lie<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>two<sp/>short<sp/>stitches<sp/>that<sp/>could</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>be<sp/>one<sp/>longer<sp/>stitch.<sp/>Repeat<sp/>until<sp/>none<sp/>are<sp/>found.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">join_short_stitches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n_points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolerence)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(found<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=*n_points-2;<sp/>i&gt;=0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st1<sp/>=<sp/>points[i+1]%width<sp/>-<sp/>points[i]%width;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>st2<sp/>=<sp/>points[i+2]%width<sp/>-<sp/>points[i+1]%width;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>same_line<sp/>=<sp/>(points[i+1]/width<sp/>==<sp/>points[i]/width)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(points[i+2]/width<sp/>==<sp/>points[i+1]/width);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st1<sp/>&lt;<sp/>tolerence<sp/>&amp;&amp;<sp/>st2<sp/>&lt;<sp/>tolerence<sp/>&amp;&amp;<sp/>same_line)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found++;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>point.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i&lt;*n_points;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[i]<sp/>=<sp/>points[i+1];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*n_points)--;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Identify<sp/>darker<sp/>pixels<sp/>to<sp/>put<sp/>stitches<sp/>in.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="normal">threshold_method(<ref refid="struct_emb_image__" kindref="compound">EmbImage</ref><sp/>*image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n_points,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsample_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsample_height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>image-&gt;<ref refid="struct_emb_image___1ad12fc34ce789bce6c8a05d8a17138534" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>image-&gt;<ref refid="struct_emb_image___1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>points<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc((height/subsample_height)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(width/subsample_width)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>*n_points<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;height/subsample_height;<sp/>i++)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;width/subsample_width;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_color__" kindref="compound">EmbColor</ref><sp/>color;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>subsample_height*i*width+subsample_width*j;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.<ref refid="struct_emb_color___1afd7b1ea9ff115205b65e0bffc92946ac" kindref="member">r</ref><sp/>=<sp/>image-&gt;<ref refid="struct_emb_image___1ac24cea2bfcc927fd29bc74d1086707d8" kindref="member">data</ref>[3*index+0];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.<ref refid="struct_emb_color___1a83576af39a9f289a28c1263d61073508" kindref="member">g</ref><sp/>=<sp/>image-&gt;<ref refid="struct_emb_image___1ac24cea2bfcc927fd29bc74d1086707d8" kindref="member">data</ref>[3*index+1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color.<ref refid="struct_emb_color___1a41cede1b4c0d05cff170ad5761f70964" kindref="member">b</ref><sp/>=<sp/>image-&gt;<ref refid="struct_emb_image___1ac24cea2bfcc927fd29bc74d1086707d8" kindref="member">data</ref>[3*index+2];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.<ref refid="struct_emb_color___1afd7b1ea9ff115205b65e0bffc92946ac" kindref="member">r</ref>+color.<ref refid="struct_emb_color___1a83576af39a9f289a28c1263d61073508" kindref="member">g</ref>+color.<ref refid="struct_emb_color___1a41cede1b4c0d05cff170ad5761f70964" kindref="member">b</ref><sp/>&lt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[*n_points]<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*n_points)++;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>points;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Greedy<sp/>Algorithm</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*<sp/>----------------</highlight></codeline>
<codeline lineno="142"><highlight class="comment">*<sp/>For<sp/>each<sp/>point<sp/>in<sp/>the<sp/>list<sp/>find<sp/>the<sp/>shortest<sp/>distance<sp/>to</highlight></codeline>
<codeline lineno="143"><highlight class="comment">*<sp/>any<sp/>possible<sp/>neighbour,<sp/>then<sp/>perform<sp/>a<sp/>swap<sp/>to<sp/>make<sp/>that</highlight></codeline>
<codeline lineno="144"><highlight class="comment">*<sp/>neighbour<sp/>the<sp/>next<sp/>item<sp/>in<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="145"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="comment">*<sp/>To<sp/>make<sp/>the<sp/>stitches<sp/>lie<sp/>more<sp/>on<sp/>one<sp/>axis<sp/>than<sp/>the<sp/>other</highlight></codeline>
<codeline lineno="147"><highlight class="comment">*<sp/>bias<sp/>the<sp/>distance<sp/>operator<sp/>to<sp/>prefer<sp/>horizontal<sp/>direction.</highlight></codeline>
<codeline lineno="148"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">greedy_algorithm(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>bias)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;points[0]<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>points[0]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;n_points<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>n_points);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;width<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>width);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;bias<sp/>=<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>bias);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n_points-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stor;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>shortest<sp/>=<sp/>1.0e20;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>nearest<sp/>neighbour.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>points[i]%width;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>points[i]/width;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=i+1;<sp/>j&lt;n_points;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>distance;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x1<sp/>-<sp/>(points[j]%width);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x*x<sp/>&gt;<sp/>shortest)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y1<sp/>-<sp/>(points[j]/width);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>=<sp/>x*x<sp/>+<sp/>bias*y*y;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&lt;<sp/>shortest)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortest<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%100<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%2.1f%%\n&quot;</highlight><highlight class="normal">,<sp/>(100.0*i)/(1.0*n_points));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stor<sp/>=<sp/>points[next];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[next]<sp/>=<sp/>points[i+1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points[i+1]<sp/>=<sp/>stor;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">save_points_to_pattern(</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_points,<sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>scale,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n_points;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>points[i]%width;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>height<sp/>-<sp/>points[i]/width;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>scale*x,<sp/>scale*y,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Uses<sp/>a<sp/>threshhold<sp/>method<sp/>to<sp/>determine<sp/>where<sp/>to<sp/>put</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>lines<sp/>in<sp/>the<sp/>fill.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>Needs<sp/>to<sp/>pass<sp/>a<sp/>&quot;donut<sp/>test&quot;,<sp/>i.e.<sp/>an<sp/>image<sp/>with<sp/>black<sp/>pixels<sp/>where:</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>10<sp/>&lt;<sp/>x*x<sp/>+<sp/>y*y<sp/>&lt;<sp/>20</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>over<sp/>the<sp/>area<sp/>(-30,<sp/>30)<sp/>x<sp/>(-30,<sp/>30).</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>Use<sp/>render<sp/>then<sp/>image<sp/>difference<sp/>to<sp/>see<sp/>how<sp/>well<sp/>it<sp/>passes.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="embroidery_8h_1aabc92974158cc1717c9a3a2ade7b04c8" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a51526002a19f07437ee07f4c6d475690" kindref="member">embPattern_horizontal_fill</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*pattern,<sp/><ref refid="struct_emb_image__" kindref="compound">EmbImage</ref><sp/>*image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshhold)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>the<sp/>crosses<sp/>in<sp/>millimeters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>scale<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_w<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_h<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>bias<sp/>=<sp/>1.2;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_points;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>points<sp/>=<sp/>threshold_method(image,<sp/>&amp;n_points,<sp/>sample_w,<sp/>sample_h,<sp/>threshhold);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>greedy_algorithm(points,<sp/>n_points,<sp/>image-&gt;<ref refid="struct_emb_image___1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref>,<sp/>bias);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>join_short_stitches(points,<sp/>&amp;n_points,<sp/>image-&gt;<ref refid="struct_emb_image___1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref>,<sp/>40);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>save_points_to_pattern(pattern,<sp/>points,<sp/>n_points,<sp/>scale,<sp/>image-&gt;<ref refid="struct_emb_image___1a2474a5474cbff19523a51eb1de01cda4" kindref="member">width</ref>,<sp/>image-&gt;<ref refid="struct_emb_image___1ad12fc34ce789bce6c8a05d8a17138534" kindref="member">height</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a5e60e4e5dfdebd4a6887f299a82adb2c" kindref="member">embPattern_end</ref>(pattern);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>free(points);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Uses<sp/>a<sp/>threshhold<sp/>method<sp/>to<sp/>determine<sp/>where<sp/>to<sp/>put</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>crosses<sp/>in<sp/>the<sp/>fill.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>To<sp/>improve<sp/>this,<sp/>we<sp/>can<sp/>remove<sp/>the<sp/>vertical<sp/>stitches<sp/>when<sp/>two<sp/>crosses</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>neighbour.<sp/>Currently<sp/>the<sp/>simple<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>to<sp/>chain<sp/>crosses</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>that<sp/>are<sp/>neighbours<sp/>exactly<sp/>one<sp/>ahead.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="embroidery_8h_1a2a11e2787f04c55c5fd09cba349b6037" refkind="member"><highlight class="normal"><ref refid="fill_8c_1aadaaf644936dbeeb4286a00c4fe04794" kindref="member">embPattern_crossstitch</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*pattern,<sp/><ref refid="struct_emb_image__" kindref="compound">EmbImage</ref><sp/>*image,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshhold)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>the<sp/>crosses<sp/>in<sp/>millimeters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>scale<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_w<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sample_h<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>bias<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*points;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_points;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>points<sp/>=<sp/>threshold_method(image,<sp/>&amp;n_points,<sp/>sample_w,<sp/>sample_h,<sp/>threshhold);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>greedy_algorithm(points,<sp/>n_points,<sp/>width,<sp/>bias);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n_points;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>points[i]%width;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>points[i]/width;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>scale*x,<sp/>scale*y,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>scale*(x+sample_w),<sp/>scale*(y+sample_h),<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>scale*x,<sp/>scale*(y+sample_h),<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>scale*(x+sample_w),<sp/>scale*y,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a5e60e4e5dfdebd4a6887f299a82adb2c" kindref="member">embPattern_end</ref>(pattern);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="embroidery_8h_1abc0ebbb6da27faacd87e8abaf57733c8" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a2f0cd5118998e9310252de0bd11c6fb2" kindref="member">hilbert_curve</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/>https://en.wikipedia.org/wiki/Hilbert_curve</highlight></codeline>
<codeline lineno="272"><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>Using<sp/>the<sp/>Lindenmayer<sp/>System,<sp/>so<sp/>we<sp/>can<sp/>save<sp/>work<sp/>across</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>different<sp/>functions.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>position[2],<sp/>direction;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>scale<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>n-th<sp/>iteration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>malloc(<ref refid="embroidery_8h_1af33a320a7e31d42c7fbb3e3796bd5b41" kindref="member">MAX_STITCHES</ref>*10);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fill_8c_1af27a83a237ef6302cbfb5af534229e10" kindref="member">lindenmayer_system</ref>(<ref refid="fill_8c_1a6e10b231de6baafee918b26f004d7327" kindref="member">hilbert_curve_l_system</ref>,<sp/>state,<sp/>iterations,<sp/>0);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>to<sp/>an<sp/>embroidery<sp/>pattern.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>position[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>position[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)strlen(state);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>(direction<sp/>+<sp/>1)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction<sp/>=<sp/>(direction<sp/>+<sp/>3)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(direction)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position[0]--;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position[1]++;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position[0]++;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position[1]--;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(pattern,<sp/>position[0]*scale,<sp/>position[1]*scale,<sp/>flags,<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>free(state);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a5e60e4e5dfdebd4a6887f299a82adb2c" kindref="member">embPattern_end</ref>(pattern);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>using<sp/>the<sp/>&quot;paper<sp/>folding&quot;<sp/>method<sp/>(find<sp/>citation)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="fill_8c_1ad02b5d945eacff708d2bf084c40044d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1ad02b5d945eacff708d2bf084c40044d8" kindref="member">generate_dragon_curve</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>length;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterations<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>strlen(state);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=length-1;<sp/>i&gt;=0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[2*i+1]<sp/>=<sp/>state[i];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i%2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[2*i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[2*i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>state[2*length+1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fill_8c_1ad02b5d945eacff708d2bf084c40044d8" kindref="member">generate_dragon_curve</ref>(state,<sp/>iterations-1);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="fill_8c_1a9f15f9548d56044f41aa91dd103c3914" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1a9f15f9548d56044f41aa91dd103c3914" kindref="member">dragon_curve</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterations<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(</highlight><highlight class="stringliteral">&quot;The<sp/>dragon<sp/>curve<sp/>is<sp/>only<sp/>supported<sp/>up<sp/>to<sp/>10<sp/>iterations.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>malloc(1&lt;&lt;(iterations+1));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fill_8c_1ad02b5d945eacff708d2bf084c40044d8" kindref="member">generate_dragon_curve</ref>(state,<sp/>iterations);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>free(state);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">StitchBlock*<sp/>BreakIntoColorBlocks(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*pattern)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sa2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StitchBlock();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldColor<sp/>=<sp/>pattern-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1a4d06a0868c91ec35c5c0e2e5661ddfa2" kindref="member">stitch</ref>[0].<ref refid="struct_emb_stitch___1a0fd02fb9277ffcb35a75066ffe95e8c7" kindref="member">color</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>pattern.ColorList[oldColor];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>sa2.Thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Thread(color.Red,<sp/>color.Blue,<sp/>color.Green);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pattern-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_stitch__" kindref="compound">EmbStitch</ref><sp/>s<sp/>=<sp/>pattern-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1a4d06a0868c91ec35c5c0e2e5661ddfa2" kindref="member">stitch</ref>[i];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.<ref refid="struct_emb_stitch___1a0fd02fb9277ffcb35a75066ffe95e8c7" kindref="member">color</ref><sp/>!=<sp/>oldColor)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sa2;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StitchBlock();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>pattern.ColorList[s.ColorIndex];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa2.Thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Thread(color.Red,<sp/>color.Blue,<sp/>color.Green);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldColor<sp/>=<sp/>s.ColorIndex;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>VectorStitch<sp/>{<sp/>Xy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Point(s.X,<sp/>s.Y),<sp/>Color<sp/>=<sp/>s.ColorIndex<sp/>};</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa2.Stitches.Add(vs);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sa2;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">StitchBlock<sp/>*<sp/>BreakIntoSeparateObjects(EmbStitchBlock*<sp/>blocks)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>block;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>previousAngle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(block=0;<sp/>block&lt;blocks-&gt;length;<sp/>block++)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stitches<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;VectorStitch&gt;();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.Stitches[0].Type<sp/>=<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.Stitches[block.Stitches.Count<sp/>-<sp/>1].Type<sp/>=<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>block.Stitches.Count<sp/>-<sp/>2;<sp/>i++)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>step<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>dx<sp/>=<sp/>(<ref refid="embroidery_8h_1af790aef236de4e53badb9a9c8ce5664a" kindref="member">embVector_relativeX</ref>(block.Stitches[i].Xy,<sp/>block.Stitches[i<sp/>+<sp/>1].Xy,<sp/>block.Stitches[i<sp/>+<sp/>2].Xy));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.Stitches[i<sp/>+<sp/>1].Type<sp/>=<sp/>dx<sp/>&lt;=<sp/>0<sp/>?<sp/>VectorStitchType.Run<sp/>:<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.Stitches[i].Angle<sp/>=<sp/>GetAngle(block.Stitches[i],<sp/>block.Stitches[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stitches.Add(block.Stitches[i].Clone());</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((block.Stitches[i].Type<sp/>==<sp/>VectorStitchType.Contour)<sp/>&amp;&amp;<sp/>fabs(block.Stitches[i].Angle<sp/>-<sp/>previousAngle)<sp/>&gt;<sp/>(20/180*<ref refid="embroidery_8h_1a052bcc45c7207b189a9fe6925ec76c99" kindref="member">embConstantPi</ref>))<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StitchBlock</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stitches<sp/>=<sp/>stitches,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Angle<sp/>=<sp/>stitches.Average(x<sp/>=&gt;<sp/>x.Angle),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Thread(block.Thread.Red,<sp/>block.Thread.Blue,<sp/>block.Thread.Green)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stitches<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;VectorStitch&gt;();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>sa.Stitches.Count<sp/>-<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa.Stitches[i<sp/>+<sp/>1].Type<sp/>==<sp/>VectorStitchType.Contour)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i<sp/>+<sp/>1].XY,<sp/>sa[i<sp/>+<sp/>2].XY,<sp/>sa[i<sp/>+<sp/>3].XY);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy2<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i].XY,<sp/>sa[i<sp/>+<sp/>1].XY,<sp/>sa[i<sp/>+<sp/>2].XY);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy3<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i<sp/>+<sp/>2].XY,<sp/>sa[i<sp/>+<sp/>3].XY,<sp/>sa[i<sp/>+<sp/>4].XY);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa.Stitches[i<sp/>-<sp/>1].Type<sp/>==<sp/>VectorStitchType.Run<sp/>||<sp/>sa.Stitches[i<sp/>+<sp/>1].Type<sp/>==<sp/>VectorStitchType.Run)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i].Type<sp/>=<sp/>VectorStitchType.Tatami;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i].Type<sp/>=<sp/>VectorStitchType.Satin;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">StitchObject<sp/>*<sp/>FindOutline(EmbStitchBlock*<sp/>stitchData)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currColorIndex<sp/>=<sp/>0,<sp/>sa;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pOdd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Point&gt;();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pEven<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Point&gt;();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(sa=0;<sp/>sa&lt;stitchData-&gt;count;<sp/>sa++)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa.Stitches.Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[0].Type<sp/>=<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[sa.Stitches.Count<sp/>-<sp/>1].Type<sp/>=<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sa.Stitches.Count<sp/>-<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>(GetRelativeX(sa.Stitches[i].Xy,<sp/>sa.Stitches[i<sp/>+<sp/>1].Xy,<sp/>sa.Stitches[i<sp/>+<sp/>2].Xy));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i<sp/>+<sp/>1].Type<sp/>=<sp/>dx<sp/>&lt;=<sp/>0<sp/>?<sp/>VectorStitchType.Run<sp/>:<sp/>VectorStitchType.Contour;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i].Angle<sp/>=<sp/><ref refid="embroidery_8h_1a04639683e8ca6259a875aea58c397a17" kindref="member">embVector_angle</ref>(sa.Stitches[i],<sp/>sa.Stitches[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>sa.Stitches.Count<sp/>-<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa.Stitches[i<sp/>+<sp/>1].Type<sp/>==<sp/>VectorStitchType.Contour)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i<sp/>+<sp/>1].XY,<sp/>sa[i<sp/>+<sp/>2].XY,<sp/>sa[i<sp/>+<sp/>3].XY);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy2<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i].XY,<sp/>sa[i<sp/>+<sp/>1].XY,<sp/>sa[i<sp/>+<sp/>2].XY);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dy3<sp/>=<sp/><ref refid="embroidery_8h_1af7f3d1d902464690990e2460088b03cb" kindref="member">embVector_relativeY</ref>(sa[i<sp/>+<sp/>2].XY,<sp/>sa[i<sp/>+<sp/>3].XY,<sp/>sa[i<sp/>+<sp/>4].XY);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sa.Stitches[i<sp/>-<sp/>1].Type<sp/>==<sp/>VectorStitchType.Run<sp/>||<sp/>sa.Stitches[i<sp/>+<sp/>1].Type<sp/>==<sp/>VectorStitchType.Run)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i].Type<sp/>=<sp/>VectorStitchType.Tatami;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.Stitches[i].Type<sp/>=<sp/>VectorStitchType.Satin;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oddEven<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(VectorStitch<sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sa.Stitches)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t.Type<sp/>==<sp/>VectorStitchType.Contour)<sp/>&amp;&amp;<sp/>(oddEven<sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEven.Add(t.Xy);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oddEven++;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t.Type<sp/>==<sp/>VectorStitchType.Contour)<sp/>&amp;&amp;<sp/>(oddEven<sp/>%<sp/>2)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pOdd.Add(t.Xy);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oddEven++;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currColorIndex++;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>so<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>StitchObject<sp/>{<sp/>SideOne<sp/>=<sp/>pEven,<sp/>SideTwo<sp/>=<sp/>pOdd,<sp/>ColorIndex<sp/>=<sp/>currColorIndex<sp/>};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>so;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pEven<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Point&gt;();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pOdd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;Point&gt;();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>break;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>DrawGraphics(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stitchData<sp/>=<sp/>BreakIntoColorBlocks(p);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outBlock<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;StitchBlock&gt;(BreakIntoSeparateObjects(stitchData));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(var<sp/>block<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stitchData)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>stitch<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>block.Stitches)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stitch.Angle<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aaa<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xxxxx<sp/>=<sp/>outBlock;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objectsFound<sp/>=<sp/>FindOutline(stitchData);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outPattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pattern();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>outPattern.AddColor(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Thread(255,<sp/>0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorIndex<sp/>=<sp/>outPattern.ColorList.Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Random();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(StitchObject<sp/>stitchObject<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>objectsFound)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stitchObject.SideOne.Count<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>stitchObject.SideTwo.Count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.AddColor(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Thread((</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>(r.Next()%256),<sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>(r.Next()%256),<sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>(r.Next()%256),</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorIndex++;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.AddStitchRelative(0,<sp/>0,<sp/>StitchTypes.Stop);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>stitchObject.Generate2(75);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>point<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.AddStitchAbsolute(point.X,<sp/>point.Y,<sp/>StitchTypes.Normal);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StitchObject<sp/>stitchObject<sp/>=<sp/>objectsFound[1];))</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stitchObject.SideOne.Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.stitch_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stitch(stitchObject.SideOne[0].X,<sp/>stitchObject.SideOne[0].Y,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StitchType.Jump,<sp/>colorIndex));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(Point<sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stitchObject.SideOne)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.stitch_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stitch(t.X,<sp/>t.Y,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StitchType.Normal,<sp/>colorIndex));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(Point<sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>stitchObject.SideTwo)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outPattern.stitch_list.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Stitch(t.X,<sp/>t.Y,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StitchType.Normal,<sp/>colorIndex));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>outPattern.AddStitchRelative(0,<sp/>0,<sp/>StitchTypes.End);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outPattern;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(SimplifyOutline(outPattern));</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>SimplifyOutline(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>pattern)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vertices();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>v.AddRange(pattern.<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>.Select(point<sp/>=&gt;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector2(point.X,<sp/>point.Y)));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>SimplifyTools.DouglasPeuckerSimplify(v,<sp/>10);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>patternOut<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Pattern();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>color<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pattern.ColorList)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patternOut.AddColor(color);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(var<sp/>vertex<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patternOut.AddStitchAbsolute(vertex.X,<sp/>vertex.Y,<sp/>StitchTypes.Normal);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>patternOut.AddStitchRelative(0,<sp/>0,<sp/>StitchTypes.End);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>patternOut;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[]<sp/>_usePt;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>_distanceTolerance;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Removes<sp/>all<sp/>collinear<sp/>points<sp/>on<sp/>the<sp/>polygon.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">Vertices<sp/>CollinearSimplify(Vertices<sp/>vertices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>collinearityTolerance)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can&apos;t<sp/>simplify<sp/>polygons<sp/>under<sp/>3<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.Count<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>simplified<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vertices();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertices.Count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevId<sp/>=<sp/>vertices.PreviousIndex(i);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextId<sp/>=<sp/>vertices.NextIndex(i);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>prev<sp/>=<sp/>vertices[prevId];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>current<sp/>=<sp/>vertices[i];</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2<sp/>next<sp/>=<sp/>vertices[nextId];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>they<sp/>collinear,<sp/>continue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(embVector_collinear(ref<sp/>prev,<sp/>ref<sp/>current,<sp/>ref<sp/>next,<sp/>collinearityTolerance))</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplified.Add(current);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>simplified;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Removes<sp/>all<sp/>collinear<sp/>points<sp/>on<sp/>the<sp/>polygon.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>Has<sp/>a<sp/>default<sp/>bias<sp/>of<sp/>0</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>param<sp/>vertices:<sp/>The<sp/>polygon<sp/>that<sp/>needs<sp/>simplification.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>returns:<sp/>A<sp/>simplified<sp/>polygon.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">Vertices<sp/>CollinearSimplify(Vertices<sp/>vertices)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CollinearSimplify(vertices,<sp/>0);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>Ramer-Douglas-Peucker<sp/>polygon<sp/>simplification<sp/>algorithm.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>general<sp/>recursive<sp/>version<sp/>that<sp/>does<sp/>not<sp/>use<sp/>the</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>speed-up<sp/>technique<sp/>by<sp/>using<sp/>the<sp/>Melkman<sp/>convex<sp/>hull.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>pass<sp/>in<sp/>0,<sp/>it<sp/>will<sp/>remove<sp/>all<sp/>collinear<sp/>points.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">Vertices<sp/>DouglasPeuckerSimplify(Vertices<sp/>vertices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceTolerance)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>_distanceTolerance<sp/>=<sp/>distanceTolerance;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>_usePt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[vertices.Count];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertices.Count;<sp/>i++)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_usePt[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>SimplifySection(vertices,<sp/>0,<sp/>vertices.Count<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vertices();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>result.AddRange(vertices.Where((t,<sp/>i)<sp/>=&gt;<sp/>_usePt[i]));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimplifySection(Vertices<sp/>vertices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>+<sp/>1)<sp/>==<sp/>j)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2<sp/>a<sp/>=<sp/>vertices[i];</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2<sp/>b<sp/>=<sp/>vertices[j];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>maxDistance<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>j;<sp/>k++)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>distance<sp/>=<sp/>DistancePointLine(vertices[k],<sp/>a,<sp/>b);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&gt;<sp/>maxDistance)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDistance<sp/>=<sp/>distance;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIndex<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDistance<sp/>&lt;=<sp/>_distanceTolerance)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>k<sp/>&lt;<sp/>j;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_usePt[k]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimplifySection(vertices,<sp/>i,<sp/>maxIndex);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimplifySection(vertices,<sp/>maxIndex,<sp/>j);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>DistancePointLine(<ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>p,<sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>a,<sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>b)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>start<sp/>==<sp/>end,<sp/>then<sp/>use<sp/>point-to-point<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.X<sp/>==<sp/>b.X<sp/>&amp;&amp;<sp/>a.Y<sp/>==<sp/>b.Y)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DistancePointPoint(p,<sp/>a);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>otherwise<sp/>use<sp/>comp.graphics.algorithms<sp/>Frequently<sp/>Asked<sp/>Questions<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AC<sp/>dot<sp/>AB</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><sp/><sp/>---------</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||AB||^2</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>has<sp/>the<sp/>following<sp/>meaning:</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=0<sp/>Point<sp/>=<sp/>A</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=1<sp/>Point<sp/>=<sp/>B</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r&lt;0<sp/>Point<sp/>is<sp/>on<sp/>the<sp/>backward<sp/>extension<sp/>of<sp/>AB</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r&gt;1<sp/>Point<sp/>is<sp/>on<sp/>the<sp/>forward<sp/>extension<sp/>of<sp/>AB</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0&lt;r&lt;1<sp/>Point<sp/>is<sp/>interior<sp/>to<sp/>AB</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>r<sp/>=<sp/>((p.X<sp/>-<sp/>a.X)<sp/>*<sp/>(b.X<sp/>-<sp/>a.X)<sp/>+<sp/>(p.Y<sp/>-<sp/>a.Y)<sp/>*<sp/>(b.Y<sp/>-<sp/>a.Y))</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((b.X<sp/>-<sp/>a.X)<sp/>*<sp/>(b.X<sp/>-<sp/>a.X)<sp/>+<sp/>(b.Y<sp/>-<sp/>a.Y)<sp/>*<sp/>(b.Y<sp/>-<sp/>a.Y));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DistancePointPoint(p,<sp/>a);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>1.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DistancePointPoint(p,<sp/>b);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(2)</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Ay-Cy)(Bx-Ax)-(Ax-Cx)(By-Ay)</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-----------------------------</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Curve^2</highlight></codeline>
<codeline lineno="679"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>the<sp/>distance<sp/>from<sp/>C<sp/>to<sp/>Point<sp/>=<sp/>|s|*Curve.</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>s<sp/>=<sp/>((a.Y<sp/>-<sp/>p.Y)<sp/>*<sp/>(b.X<sp/>-<sp/>a.X)<sp/>-<sp/>(a.X<sp/>-<sp/>p.X)<sp/>*<sp/>(b.Y<sp/>-<sp/>a.Y))</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((b.X<sp/>-<sp/>a.X)<sp/>*<sp/>(b.X<sp/>-<sp/>a.X)<sp/>+<sp/>(b.Y<sp/>-<sp/>a.Y)<sp/>*<sp/>(b.Y<sp/>-<sp/>a.Y));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(s)<sp/>*<sp/>sqrt(((b.X<sp/>-<sp/>a.X)<sp/>*<sp/>(b.X<sp/>-<sp/>a.X)<sp/>+<sp/>(b.Y<sp/>-<sp/>a.Y)<sp/>*<sp/>(b.Y<sp/>-<sp/>a.Y)));</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">/<sp/>*<sp/>From<sp/>physics2d.net<sp/>*<sp/>/</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vertices<sp/>ReduceByArea(Vertices<sp/>vertices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>areaTolerance)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.Count<sp/>&lt;=<sp/>3)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vertices;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(areaTolerance<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArgumentOutOfRangeException(</highlight><highlight class="stringliteral">&quot;areaTolerance&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>then<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vertices();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2<sp/>v3;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2<sp/>v1<sp/>=<sp/>vertices[vertices.Count<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2<sp/>v2<sp/>=<sp/>vertices[vertices.Count<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>areaTolerance<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>vertices.Count;<sp/>++index,<sp/>v2<sp/>=<sp/>v3)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>vertices.Count<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.Count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArgumentOutOfRangeException(</highlight><highlight class="stringliteral">&quot;areaTolerance&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>tolerance<sp/>is<sp/>too<sp/>high!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>result[0];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>vertices[index];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>old1,<sp/>old2,<sp/>new1;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MathUtils.Cross(ref<sp/>v1,<sp/>ref<sp/>v2,<sp/>out<sp/>old1);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MathUtils.Cross(ref<sp/>v2,<sp/>ref<sp/>v3,<sp/>out<sp/>old2);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MathUtils.Cross(ref<sp/>v1,<sp/>ref<sp/>v3,<sp/>out<sp/>new1);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(new1<sp/>-<sp/>(old1<sp/>+<sp/>old2))<sp/>&gt;<sp/>areaTolerance)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Add(v2);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>From<sp/>Eric<sp/>Jordan&apos;s<sp/>convex<sp/>decomposition<sp/>library.</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>Merges<sp/>all<sp/>parallel<sp/>edges<sp/>in<sp/>the<sp/>list<sp/>of<sp/>vertices.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeParallelEdges(<ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*vertices,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tolerance)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices.Count<sp/>&lt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>do<sp/>anything<sp/>useful<sp/>here<sp/>to<sp/>a<sp/>triangle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mergeMe<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[vertices.Count];</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newNVertices<sp/>=<sp/>vertices.Count;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Gather<sp/>points<sp/>to<sp/>process<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>delta0,<sp/>delta1;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower<sp/>=<sp/>(i<sp/>==<sp/>0)<sp/>?<sp/>(vertices.Count<sp/>-<sp/>1)<sp/>:<sp/>(i<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/>(i<sp/>==<sp/>vertices.Count<sp/>-<sp/>1)<sp/>?<sp/>(0)<sp/>:<sp/>(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta0<sp/>=<sp/><ref refid="embroidery_8h_1a38503615e02e56b3004cc02664e1e62d" kindref="member">embVector_subtract</ref>(vertices[i],<sp/>vertices[lower]);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta1<sp/>=<sp/><ref refid="embroidery_8h_1a38503615e02e56b3004cc02664e1e62d" kindref="member">embVector_subtract</ref>(vertices[upper],<sp/>vertices[i]);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm0<sp/>=<sp/><ref refid="embroidery_8h_1ac0161afdbecb1d33336072331183e441" kindref="member">embVector_length</ref>(delta0);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm1<sp/>=<sp/><ref refid="embroidery_8h_1ac0161afdbecb1d33336072331183e441" kindref="member">embVector_length</ref>(delta0);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(norm0<sp/>&gt;<sp/>0.0f<sp/>&amp;&amp;<sp/>norm1<sp/>&gt;<sp/>0.0f)<sp/>&amp;&amp;<sp/>newNVertices<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Merge<sp/>identical<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeMe[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNVertices--;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a34e670486dcdd3b97c65c81ba8eea067" kindref="member">embVector_normalize</ref>(delta0,<sp/>&amp;delta0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a34e670486dcdd3b97c65c81ba8eea067" kindref="member">embVector_normalize</ref>(delta1,<sp/>&amp;delta1);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cross<sp/>=<sp/><ref refid="embroidery_8h_1a07e04b93bf1b220b0287b3e8e7de7c0c" kindref="member">embVector_cross</ref>(delta0,<sp/>delta1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dot<sp/>=<sp/><ref refid="embroidery_8h_1a30cd27cebdce50d05099d257afc91381" kindref="member">embVector_dot</ref>(delta0,<sp/>delta1);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cross)<sp/>&lt;<sp/>tolerance<sp/>&amp;&amp;<sp/>dot<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>newNVertices<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeMe[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNVertices--;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergeMe[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newNVertices<sp/>==<sp/>vertices.Count<sp/>||<sp/>newNVertices<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>vertices<sp/>to<sp/>a<sp/>new<sp/>list<sp/>and<sp/>clear<sp/>the<sp/>old<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldVertices<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vertices(vertices);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.Clear();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>oldVertices.Count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mergeMe[i]<sp/>||<sp/>newNVertices<sp/>==<sp/>0<sp/>||<sp/>currIndex<sp/>==<sp/>newNVertices)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.Add(oldVertices[i]);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currIndex++;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1accb8d958755abb87ae8fe5cb64241c5b" kindref="member">embPolygon_reduceByDistance</ref>(<ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*vertices,<sp/><ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*simplified,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1aa25158aa39b36f6981756295d6601910" kindref="member">embPolygon_reduceByNth</ref>(<ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*vertices,<sp/><ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nth);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reduces<sp/>the<sp/>polygon<sp/>by<sp/>distance.</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>non-destructive<sp/>function,<sp/>so<sp/>the<sp/>caller<sp/>is<sp/>responsible<sp/>for</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>freeing<sp/>&quot;vertices&quot;<sp/>if<sp/>they<sp/>choose<sp/>to<sp/>keep<sp/>&quot;simplified&quot;.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="fill_8c_1accb8d958755abb87ae8fe5cb64241c5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1accb8d958755abb87ae8fe5cb64241c5b" kindref="member">embPolygon_reduceByDistance</ref>(<ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*vertices,<sp/><ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*simplified,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can&apos;t<sp/>simplify<sp/>polygons<sp/>under<sp/>3<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref><sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1a60f927b9cef227b5c19a8625580a9bad" kindref="member">embArray_copy</ref>(simplified,<sp/>vertices);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>delta;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextId<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>%<sp/>vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/><ref refid="embroidery_8h_1a38503615e02e56b3004cc02664e1e62d" kindref="member">embVector_subtract</ref>(</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices-&gt;<ref refid="struct_emb_array___1a53ed4a940a3d3011efefded128131523" kindref="member">geometry</ref>[nextId].<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a397103c1ef81333bc4e689bb8da585ec" kindref="member">vector</ref>,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices-&gt;<ref refid="struct_emb_array___1a53ed4a940a3d3011efefded128131523" kindref="member">geometry</ref>[i].<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a397103c1ef81333bc4e689bb8da585ec" kindref="member">vector</ref>);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>they<sp/>are<sp/>closer<sp/>than<sp/>the<sp/>distance,<sp/>continue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="embroidery_8h_1ac0161afdbecb1d33336072331183e441" kindref="member">embVector_length</ref>(delta)<sp/>&lt;<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1ae7afecc6b39df1016ccda59227922483" kindref="member">embArray_addVector</ref>(simplified,<sp/>vertices-&gt;<ref refid="struct_emb_array___1a53ed4a940a3d3011efefded128131523" kindref="member">geometry</ref>[i].<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a397103c1ef81333bc4e689bb8da585ec" kindref="member">vector</ref>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Reduces<sp/>the<sp/>polygon<sp/>by<sp/>removing<sp/>the<sp/>Nth<sp/>vertex<sp/>in<sp/>the<sp/>vertices<sp/>list.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>non-destructive<sp/>function,<sp/>so<sp/>the<sp/>caller<sp/>is<sp/>responsible<sp/>for</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*<sp/>freeing<sp/>vertices<sp/>if<sp/>they<sp/>choose<sp/>to<sp/>keep<sp/>out.</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="fill_8c_1aa25158aa39b36f6981756295d6601910" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fill_8c_1aa25158aa39b36f6981756295d6601910" kindref="member">embPolygon_reduceByNth</ref>(<ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*vertices,<sp/><ref refid="struct_emb_array__" kindref="compound">EmbArray</ref><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nth)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>can&apos;t<sp/>simplify<sp/>polygons<sp/>under<sp/>3<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref><sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1a60f927b9cef227b5c19a8625580a9bad" kindref="member">embArray_copy</ref>(out,<sp/>vertices);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;vertices-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i!=nth)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1ae7afecc6b39df1016ccda59227922483" kindref="member">embArray_addVector</ref>(out,<sp/>vertices-&gt;<ref refid="struct_emb_array___1a53ed4a940a3d3011efefded128131523" kindref="member">geometry</ref>[i].<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a397103c1ef81333bc4e689bb8da585ec" kindref="member">vector</ref>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*</highlight></codeline>
<codeline lineno="854" refid="embroidery_8h_1a00deebb53dcaab1a1669e4549f97de62" refkind="member"><highlight class="normal"><ref refid="fill_8c_1aa629adadc7956aab2bfd8b0de7ccdd54" kindref="member">embPattern_combine</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p1,<sp/><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p2)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*out<sp/>=<sp/><ref refid="embroidery_8h_1ad1be1abf388d4479ffe2b75f8470273b" kindref="member">embPattern_create</ref>();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;p1-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1a1d13609cda6e94f68c1bb7f21fab2cb1" kindref="member">embArray_addStitch</ref>(out-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>,<sp/>p1-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1a4d06a0868c91ec35c5c0e2e5661ddfa2" kindref="member">stitch</ref>[i]);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;p2-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="array_8c_1a1d13609cda6e94f68c1bb7f21fab2cb1" kindref="member">embArray_addStitch</ref>(out-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>,<sp/>p2-&gt;<ref refid="struct_emb_pattern___1a4838c6d36990e7fcf958d1029f4a98aa" kindref="member">stitch_list</ref>-&gt;<ref refid="struct_emb_array___1a4d06a0868c91ec35c5c0e2e5661ddfa2" kindref="member">stitch</ref>[i]);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>need<sp/>to<sp/>be<sp/>merged,<sp/>not<sp/>appended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;p1-&gt;<ref refid="struct_emb_pattern___1a557baab7c413f8c27729c6cbab8ba102" kindref="member">thread_list</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a1b281916881a27935b9e1f6bcffb2087" kindref="member">embPattern_addThread</ref>(out,<sp/>p1-&gt;<ref refid="struct_emb_pattern___1a557baab7c413f8c27729c6cbab8ba102" kindref="member">thread_list</ref>-&gt;<ref refid="struct_emb_array___1a87dbedfa066778e08311fe1bbb89b302" kindref="member">thread</ref>[i]);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;p2-&gt;<ref refid="struct_emb_pattern___1a557baab7c413f8c27729c6cbab8ba102" kindref="member">thread_list</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a1b281916881a27935b9e1f6bcffb2087" kindref="member">embPattern_addThread</ref>(out,<sp/>p2-&gt;<ref refid="struct_emb_pattern___1a557baab7c413f8c27729c6cbab8ba102" kindref="member">thread_list</ref>-&gt;<ref refid="struct_emb_array___1a87dbedfa066778e08311fe1bbb89b302" kindref="member">thread</ref>[i]);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875" refid="fill_8c_1a8e048d8296a5178c1188ca70ee2256e7" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a8e048d8296a5178c1188ca70ee2256e7" kindref="member">embPattern_stitchArc</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_arc__" kindref="compound">EmbArc</ref><sp/>arc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881" refid="fill_8c_1a4927287166f2a0abbc7b482ff4054a5e" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a4927287166f2a0abbc7b482ff4054a5e" kindref="member">embPattern_stitchCircle</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_circle__" kindref="compound">EmbCircle</ref><sp/>circle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>style<sp/>determines:</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>stitch<sp/>density</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>fill<sp/>pattern</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>outline<sp/>or<sp/>fill</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>now<sp/>it&apos;s<sp/>a<sp/>straight<sp/>fill<sp/>of<sp/>1000<sp/>stitches<sp/>of<sp/>the<sp/>whole<sp/>object<sp/>by<sp/></highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>default.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Consider<sp/>the<sp/>intersection<sp/>of<sp/>a<sp/>line<sp/>in<sp/>direction<sp/>&quot;d&quot;<sp/>that<sp/>passes<sp/>through</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>disc<sp/>with<sp/>center<sp/>&quot;c&quot;,<sp/>radius<sp/>&quot;r&quot;.<sp/>The<sp/>start<sp/>and<sp/>end<sp/>points<sp/>are:</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>$(c-r(d/|d|),<sp/>c<sp/>+<sp/>r(d/|d|))$</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lines<sp/>that<sp/>are<sp/>above<sp/>and<sp/>below<sp/>this<sp/>with<sp/>an<sp/>even<sp/>seperation<sp/>$s$<sp/>can<sp/>be<sp/></highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>found<sp/>by<sp/>taking<sp/>the<sp/>point<sp/>on<sp/>the<sp/>line<sp/>to<sp/>be<sp/>c+sn<sp/>where<sp/>the<sp/>$n$<sp/>is<sp/>the<sp/></highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>unit<sp/>normal<sp/>vector<sp/>to<sp/>$d$<sp/>and<sp/>the<sp/>vector<sp/>to<sp/>be<sp/>$d$<sp/>again.<sp/>The</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>intersection<sp/>points<sp/>are<sp/>therefore<sp/>a<sp/>right<sp/>angled<sp/>triangle,<sp/>with<sp/>one<sp/>side</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>r,<sp/>another<sp/>s<sp/>and<sp/>the<sp/>third<sp/>the<sp/>length<sp/>to<sp/>be<sp/>solved,<sp/>by<sp/>Pythagoras<sp/>we</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>have:</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>$(c<sp/>+<sp/>sn<sp/>-<sp/>\sqrt{r^2-s^2}(d/|d|),<sp/>c<sp/>+<sp/>sn<sp/>+<sp/>\sqrt{r^2-s^2}(d/|d|))$</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>repeating<sp/>this<sp/>process<sp/>gives<sp/>us<sp/>all<sp/>the<sp/>end<sp/>points<sp/>and<sp/>the<sp/>fill<sp/>only<sp/></highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>alters<sp/>these<sp/>lines<sp/>by<sp/>splitting<sp/>the<sp/>ones<sp/>longer<sp/>than<sp/>some<sp/>tolerence.</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>seperation<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>direction<sp/>=<sp/>{1.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>normal<sp/>=<sp/>{-1.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a34e670486dcdd3b97c65c81ba8eea067" kindref="member">embVector_normalize</ref>(direction,<sp/>&amp;direction);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a34e670486dcdd3b97c65c81ba8eea067" kindref="member">embVector_normalize</ref>(normal,<sp/>&amp;normal);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=-circle.<ref refid="struct_emb_circle___1a1f90f77f18adae49041cb441535414ce" kindref="member">radius</ref>;<sp/>s&lt;circle.<ref refid="struct_emb_circle___1a1f90f77f18adae49041cb441535414ce" kindref="member">radius</ref>;<sp/>s<sp/>+=<sp/>seperation)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_line__" kindref="compound">EmbLine</ref><sp/>line;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>sqrt(circle.<ref refid="struct_emb_circle___1a1f90f77f18adae49041cb441535414ce" kindref="member">radius</ref>*circle.<ref refid="struct_emb_circle___1a1f90f77f18adae49041cb441535414ce" kindref="member">radius</ref><sp/>-<sp/>s*s);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_vector__" kindref="compound">EmbVector</ref><sp/>scaled;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a710ebab38d10db6e2582707c1d60036b" kindref="member">embVector_multiply</ref>(normal,<sp/>s,<sp/>&amp;scaled);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.<ref refid="struct_emb_line___1ad61a9cd980182f7b946d1a38aaee8562" kindref="member">start</ref><sp/>=<sp/><ref refid="embroidery_8h_1a6efd27ecee68d6b66d1abae0d90925a7" kindref="member">embVector_add</ref>(circle.<ref refid="struct_emb_circle___1a68e2bdfeb187d1c5a46afffe5129aabf" kindref="member">center</ref>,<sp/>scaled);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a710ebab38d10db6e2582707c1d60036b" kindref="member">embVector_multiply</ref>(direction,<sp/>length,<sp/>&amp;scaled);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.<ref refid="struct_emb_line___1ad61a9cd980182f7b946d1a38aaee8562" kindref="member">start</ref><sp/>=<sp/><ref refid="embroidery_8h_1a38503615e02e56b3004cc02664e1e62d" kindref="member">embVector_subtract</ref>(line.<ref refid="struct_emb_line___1ad61a9cd980182f7b946d1a38aaee8562" kindref="member">start</ref>,<sp/>scaled);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a710ebab38d10db6e2582707c1d60036b" kindref="member">embVector_multiply</ref>(normal,<sp/>s,<sp/>&amp;scaled);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.<ref refid="struct_emb_line___1ac19242fe9e53942be61574685fbd49ed" kindref="member">end</ref><sp/>=<sp/><ref refid="embroidery_8h_1a6efd27ecee68d6b66d1abae0d90925a7" kindref="member">embVector_add</ref>(circle.<ref refid="struct_emb_circle___1a68e2bdfeb187d1c5a46afffe5129aabf" kindref="member">center</ref>,<sp/>scaled);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a710ebab38d10db6e2582707c1d60036b" kindref="member">embVector_multiply</ref>(direction,<sp/>length,<sp/>&amp;scaled);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line.<ref refid="struct_emb_line___1ac19242fe9e53942be61574685fbd49ed" kindref="member">end</ref><sp/>=<sp/><ref refid="embroidery_8h_1a6efd27ecee68d6b66d1abae0d90925a7" kindref="member">embVector_add</ref>(line.<ref refid="struct_emb_line___1ac19242fe9e53942be61574685fbd49ed" kindref="member">end</ref>,<sp/>scaled);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>long<sp/>stitches<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>line.<ref refid="struct_emb_line___1ad61a9cd980182f7b946d1a38aaee8562" kindref="member">start</ref>.<ref refid="struct_emb_vector___1ae1a3958205104364b97172da19628db7" kindref="member">x</ref>,<sp/>line.<ref refid="struct_emb_line___1ad61a9cd980182f7b946d1a38aaee8562" kindref="member">start</ref>.<ref refid="struct_emb_vector___1ac696d7e3434ae029d180ef550e61af2d" kindref="member">y</ref>,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>line.<ref refid="struct_emb_line___1ac19242fe9e53942be61574685fbd49ed" kindref="member">end</ref>.<ref refid="struct_emb_vector___1ae1a3958205104364b97172da19628db7" kindref="member">x</ref>,<sp/>line.<ref refid="struct_emb_line___1ac19242fe9e53942be61574685fbd49ed" kindref="member">end</ref>.<ref refid="struct_emb_vector___1ac696d7e3434ae029d180ef550e61af2d" kindref="member">y</ref>,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933" refid="fill_8c_1a63bc84e4406e59c092a2e076afedf930" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a63bc84e4406e59c092a2e076afedf930" kindref="member">embPattern_stitchEllipse</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_ellipse__" kindref="compound">EmbEllipse</ref><sp/>ellipse,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939" refid="fill_8c_1a130b4030da774600c6005183dabb2d28" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a130b4030da774600c6005183dabb2d28" kindref="member">embPattern_stitchPath</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_path__" kindref="compound">EmbPath</ref><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="fill_8c_1a6e95b120116c16767cecbd2284ce1e7b" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a6e95b120116c16767cecbd2284ce1e7b" kindref="member">embPattern_stitchPolygon</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_path__" kindref="compound">EmbPolygon</ref><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="fill_8c_1a18bde39bfa17dfb7fe07137d62260e5c" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a18bde39bfa17dfb7fe07137d62260e5c" kindref="member">embPattern_stitchPolyline</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_path__" kindref="compound">EmbPolyline</ref><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957" refid="fill_8c_1ae38ddde615726bba5070a6b17ce6d018" refkind="member"><highlight class="normal"><ref refid="fill_8c_1ae38ddde615726bba5070a6b17ce6d018" kindref="member">embPattern_stitchRect</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_rect__" kindref="compound">EmbRect</ref><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>we<sp/>just<sp/>stitch<sp/>the<sp/>rectangle<sp/>in<sp/>the<sp/>direction<sp/>of<sp/>it&apos;s<sp/>longer<sp/>side.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>seperation<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>width<sp/>=<sp/>rect.<ref refid="struct_emb_rect___1a74553efd0031b4ea1214293434719a5c" kindref="member">right</ref><sp/>-<sp/>rect.<ref refid="struct_emb_rect___1add22e8a42c753ce55b8c0bb8d00d8fa5" kindref="member">left</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1a2082be9aabfb541dff1825c4ca6a05cd" kindref="member">EmbReal</ref><sp/>height<sp/>=<sp/>rect.<ref refid="struct_emb_rect___1a80919e999819bed2a8571971e583212f" kindref="member">bottom</ref><sp/>-<sp/>rect.<ref refid="struct_emb_rect___1a4b993166cfa980dd5e6a6509918ece68" kindref="member">top</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=rect.<ref refid="struct_emb_rect___1a4b993166cfa980dd5e6a6509918ece68" kindref="member">top</ref>;<sp/>s&lt;rect.<ref refid="struct_emb_rect___1a80919e999819bed2a8571971e583212f" kindref="member">bottom</ref>;<sp/>s<sp/>+=<sp/>seperation)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>long<sp/>stitches<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>rect.<ref refid="struct_emb_rect___1a4b993166cfa980dd5e6a6509918ece68" kindref="member">top</ref>,<sp/>s,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>rect.<ref refid="struct_emb_rect___1a80919e999819bed2a8571971e583212f" kindref="member">bottom</ref>,<sp/>s,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=rect.<ref refid="struct_emb_rect___1add22e8a42c753ce55b8c0bb8d00d8fa5" kindref="member">left</ref>;<sp/>s&lt;rect.<ref refid="struct_emb_rect___1a74553efd0031b4ea1214293434719a5c" kindref="member">right</ref>;<sp/>s<sp/>+=<sp/>seperation)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>long<sp/>stitches<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>s,<sp/>rect.<ref refid="struct_emb_rect___1add22e8a42c753ce55b8c0bb8d00d8fa5" kindref="member">left</ref>,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="embroidery_8h_1adb38a95b0ac7c7f48aa92bcb156f9413" kindref="member">embPattern_addStitchAbs</ref>(p,<sp/>s,<sp/>rect.<ref refid="struct_emb_rect___1a74553efd0031b4ea1214293434719a5c" kindref="member">right</ref>,<sp/><ref refid="embroidery_8h_1a1291f416b069313021b519eea62d5bf1" kindref="member">NORMAL</ref>,<sp/>thread_index);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982" refid="fill_8c_1a908f6c41318183bcfceebdd9b646dc90" refkind="member"><highlight class="normal"><ref refid="fill_8c_1a908f6c41318183bcfceebdd9b646dc90" kindref="member">embPattern_stitchText</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref><sp/>*p,<sp/><ref refid="struct_emb_rect__" kindref="compound">EmbRect</ref><sp/>rect,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>style)</highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="embroidery_8h_1a65792d1b0c470b33261281062fb92a54" refkind="member"><highlight class="normal"><ref refid="fill_8c_1ad948b1ae6e42c31b1a020348bedddfab" kindref="member">embPattern_convertGeometry</ref>(<ref refid="struct_emb_pattern__" kindref="compound">EmbPattern</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;p-&gt;<ref refid="struct_emb_pattern___1aaddfa3a566bc153ef88a3106389e20d4" kindref="member">geometry</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_emb_geometry__" kindref="compound">EmbGeometry</ref><sp/>g<sp/>=<sp/>p-&gt;<ref refid="struct_emb_pattern___1aaddfa3a566bc153ef88a3106389e20d4" kindref="member">geometry</ref>-&gt;<ref refid="struct_emb_array___1a53ed4a940a3d3011efefded128131523" kindref="member">geometry</ref>[i];</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g.<ref refid="struct_emb_geometry___1ac765329451135abec74c45e1897abf26" kindref="member">type</ref>)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="embroidery_8h_1a121b752016999703e9ec106a3839d5dc" kindref="member">EMB_ARC</ref>:<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>Do<sp/>make<sp/>the<sp/>thread<sp/>up<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1a8e048d8296a5178c1188ca70ee2256e7" kindref="member">embPattern_stitchArc</ref>(p,<sp/>g.<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a643b1c49b6a47115b01c80af29914520" kindref="member">arc</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="embroidery_8h_1a360a30eda3be6c003bc6aff56be7be37" kindref="member">EMB_CIRCLE</ref>:<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>Do<sp/>make<sp/>the<sp/>thread<sp/>up<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1a4927287166f2a0abbc7b482ff4054a5e" kindref="member">embPattern_stitchCircle</ref>(p,<sp/>g.<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a266384774724ffa486e4512821606c8b" kindref="member">circle</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="embroidery_8h_1a09ebf481eb0c684537b863663e40ede8" kindref="member">EMB_ELLIPSE</ref>:<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>Do<sp/>make<sp/>the<sp/>thread<sp/>up<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1a63bc84e4406e59c092a2e076afedf930" kindref="member">embPattern_stitchEllipse</ref>(p,<sp/>g.<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1a21524733115b114333b98bba4ba8ec13" kindref="member">ellipse</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="embroidery_8h_1a2fcee7ad80543768ad9578ca4ec02ada" kindref="member">EMB_RECT</ref>:<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>Do<sp/>make<sp/>the<sp/>thread<sp/>up<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fill_8c_1ae38ddde615726bba5070a6b17ce6d018" kindref="member">embPattern_stitchRect</ref>(p,<sp/>g.<ref refid="struct_emb_geometry___1a31650b1b1788d96f8b93bb39ed6e17ba" kindref="member">object</ref>.<ref refid="struct_emb_geometry___1abbe981e36903877bff823bb13928ae38" kindref="member">rect</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>ignore<sp/>the<sp/>geometry<sp/>when<sp/>writing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;<ref refid="struct_emb_pattern___1aaddfa3a566bc153ef88a3106389e20d4" kindref="member">geometry</ref>-&gt;<ref refid="struct_emb_array___1ad43c3812e6d13e0518d9f8b8f463ffcf" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/fill.c"/>
  </compounddef>
</doxygen>
