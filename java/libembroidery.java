/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class libembroidery implements libembroideryConstants {
  public static int lindenmayer_system(L_system L, String state, int iteration, int complete) {
    return libembroideryJNI.lindenmayer_system(L_system.getCPtr(L), L, state, iteration, complete);
  }

  public static int hilbert_curve(EmbPattern pattern, int iterations) {
    return libembroideryJNI.hilbert_curve(EmbPattern.getCPtr(pattern), pattern, iterations);
  }

  public static int emb_identify_format(String ending) {
    return libembroideryJNI.emb_identify_format(ending);
  }

  public static EmbArray_ embArray_create(int type) {
    long cPtr = libembroideryJNI.embArray_create(type);
    return (cPtr == 0) ? null : new EmbArray_(cPtr, false);
  }

  public static int embArray_resize(EmbArray_ g) {
    return libembroideryJNI.embArray_resize(EmbArray_.getCPtr(g), g);
  }

  public static void embArray_copy(EmbArray_ dst, EmbArray_ src) {
    libembroideryJNI.embArray_copy(EmbArray_.getCPtr(dst), dst, EmbArray_.getCPtr(src), src);
  }

  public static int embArray_addArc(EmbArray_ g, EmbArc arc, int lineType, EmbColor color) {
    return libembroideryJNI.embArray_addArc(EmbArray_.getCPtr(g), g, EmbArc.getCPtr(arc), arc, lineType, EmbColor.getCPtr(color), color);
  }

  public static int embArray_addCircle(EmbArray_ g, EmbCircle circle, int lineType, EmbColor color) {
    return libembroideryJNI.embArray_addCircle(EmbArray_.getCPtr(g), g, EmbCircle.getCPtr(circle), circle, lineType, EmbColor.getCPtr(color), color);
  }

  public static int embArray_addEllipse(EmbArray_ g, EmbEllipse circle, double rotation, int lineType, EmbColor color) {
    return libembroideryJNI.embArray_addEllipse(EmbArray_.getCPtr(g), g, EmbEllipse.getCPtr(circle), circle, rotation, lineType, EmbColor.getCPtr(color), color);
  }

  public static int embArray_addFlag(EmbArray_ g, int flag) {
    return libembroideryJNI.embArray_addFlag(EmbArray_.getCPtr(g), g, flag);
  }

  public static int embArray_addLine(EmbArray_ g, EmbLineObject line) {
    return libembroideryJNI.embArray_addLine(EmbArray_.getCPtr(g), g, EmbLineObject.getCPtr(line), line);
  }

  public static int embArray_addRect(EmbArray_ g, EmbRect rect, int lineType, EmbColor color) {
    return libembroideryJNI.embArray_addRect(EmbArray_.getCPtr(g), g, EmbRect.getCPtr(rect), rect, lineType, EmbColor.getCPtr(color), color);
  }

  public static int embArray_addPath(EmbArray_ g, EmbPathObject p) {
    return libembroideryJNI.embArray_addPath(EmbArray_.getCPtr(g), g, EmbPathObject.getCPtr(p), p);
  }

  public static int embArray_addPoint(EmbArray_ g, EmbPointObject p) {
    return libembroideryJNI.embArray_addPoint(EmbArray_.getCPtr(g), g, EmbPointObject.getCPtr(p), p);
  }

  public static int embArray_addPolygon(EmbArray_ g, EmbPolygonObject p) {
    return libembroideryJNI.embArray_addPolygon(EmbArray_.getCPtr(g), g, EmbPolygonObject.getCPtr(p), p);
  }

  public static int embArray_addPolyline(EmbArray_ g, EmbPolylineObject p) {
    return libembroideryJNI.embArray_addPolyline(EmbArray_.getCPtr(g), g, EmbPolylineObject.getCPtr(p), p);
  }

  public static int embArray_addStitch(EmbArray_ g, EmbStitch st) {
    return libembroideryJNI.embArray_addStitch(EmbArray_.getCPtr(g), g, EmbStitch.getCPtr(st), st);
  }

  public static int embArray_addThread(EmbArray_ g, EmbThread p) {
    return libembroideryJNI.embArray_addThread(EmbArray_.getCPtr(g), g, EmbThread.getCPtr(p), p);
  }

  public static int embArray_addVector(EmbArray_ g, EmbVector arg1) {
    return libembroideryJNI.embArray_addVector(EmbArray_.getCPtr(g), g, EmbVector.getCPtr(arg1), arg1);
  }

  public static void embArray_free(EmbArray_ p) {
    libembroideryJNI.embArray_free(EmbArray_.getCPtr(p), p);
  }

  public static EmbLine embLine_make(double x1, double y1, double x2, double y2) {
    return new EmbLine(libembroideryJNI.embLine_make(x1, y1, x2, y2), true);
  }

  public static void embLine_normalVector(EmbLine line, EmbVector result, int clockwise) {
    libembroideryJNI.embLine_normalVector(EmbLine.getCPtr(line), line, EmbVector.getCPtr(result), result, clockwise);
  }

  public static EmbVector embLine_intersectionPoint(EmbLine line1, EmbLine line2) {
    return new EmbVector(libembroideryJNI.embLine_intersectionPoint(EmbLine.getCPtr(line1), line1, EmbLine.getCPtr(line2), line2), true);
  }

  public static int embThread_findNearestColor(EmbColor color, EmbArray_ colors, int mode) {
    return libembroideryJNI.embThread_findNearestColor(EmbColor.getCPtr(color), color, EmbArray_.getCPtr(colors), colors, mode);
  }

  public static int embThread_findNearestColor_fromThread(EmbColor color, EmbThread colors, int length) {
    return libembroideryJNI.embThread_findNearestColor_fromThread(EmbColor.getCPtr(color), color, EmbThread.getCPtr(colors), colors, length);
  }

  public static EmbThread embThread_getRandom() {
    return new EmbThread(libembroideryJNI.embThread_getRandom(), true);
  }

  public static void embVector_normalize(EmbVector vector, EmbVector result) {
    libembroideryJNI.embVector_normalize(EmbVector.getCPtr(vector), vector, EmbVector.getCPtr(result), result);
  }

  public static void embVector_multiply(EmbVector vector, double magnitude, EmbVector result) {
    libembroideryJNI.embVector_multiply(EmbVector.getCPtr(vector), vector, magnitude, EmbVector.getCPtr(result), result);
  }

  public static void embVector_add(EmbVector v1, EmbVector v2, EmbVector result) {
    libembroideryJNI.embVector_add(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2, EmbVector.getCPtr(result), result);
  }

  public static void embVector_average(EmbVector v1, EmbVector v2, EmbVector result) {
    libembroideryJNI.embVector_average(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2, EmbVector.getCPtr(result), result);
  }

  public static void embVector_subtract(EmbVector v1, EmbVector v2, EmbVector result) {
    libembroideryJNI.embVector_subtract(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2, EmbVector.getCPtr(result), result);
  }

  public static float embVector_dot(EmbVector v1, EmbVector v2) {
    return libembroideryJNI.embVector_dot(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2);
  }

  public static float embVector_cross(EmbVector v1, EmbVector v2) {
    return libembroideryJNI.embVector_cross(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2);
  }

  public static void embVector_transpose_product(EmbVector v1, EmbVector v2, EmbVector result) {
    libembroideryJNI.embVector_transpose_product(EmbVector.getCPtr(v1), v1, EmbVector.getCPtr(v2), v2, EmbVector.getCPtr(result), result);
  }

  public static float embVector_length(EmbVector vector) {
    return libembroideryJNI.embVector_length(EmbVector.getCPtr(vector), vector);
  }

  public static float embVector_relativeX(EmbVector a1, EmbVector a2, EmbVector a3) {
    return libembroideryJNI.embVector_relativeX(EmbVector.getCPtr(a1), a1, EmbVector.getCPtr(a2), a2, EmbVector.getCPtr(a3), a3);
  }

  public static float embVector_relativeY(EmbVector a1, EmbVector a2, EmbVector a3) {
    return libembroideryJNI.embVector_relativeY(EmbVector.getCPtr(a1), a1, EmbVector.getCPtr(a2), a2, EmbVector.getCPtr(a3), a3);
  }

  public static float embVector_angle(EmbVector v) {
    return libembroideryJNI.embVector_angle(EmbVector.getCPtr(v), v);
  }

  public static float embVector_distance(EmbVector a, EmbVector b) {
    return libembroideryJNI.embVector_distance(EmbVector.getCPtr(a), a, EmbVector.getCPtr(b), b);
  }

  public static EmbVector embVector_unit(float angle) {
    return new EmbVector(libembroideryJNI.embVector_unit(angle), true);
  }

  public static int read_ppm_image(String fname, EmbImage a) {
    return libembroideryJNI.read_ppm_image(fname, EmbImage.getCPtr(a), a);
  }

  public static void write_ppm_image(String fname, EmbImage a) {
    libembroideryJNI.write_ppm_image(fname, EmbImage.getCPtr(a), a);
  }

  public static float image_diff(EmbImage image1, EmbImage image2) {
    return libembroideryJNI.image_diff(EmbImage.getCPtr(image1), image1, EmbImage.getCPtr(image2), image2);
  }

  public static int render_line(EmbLine arg0, EmbImage arg1, EmbColor arg2) {
    return libembroideryJNI.render_line(EmbLine.getCPtr(arg0), arg0, EmbImage.getCPtr(arg1), arg1, EmbColor.getCPtr(arg2), arg2);
  }

  public static int embImage_render(EmbPattern pattern, float width, float height, String fname) {
    return libembroideryJNI.embImage_render(EmbPattern.getCPtr(pattern), pattern, width, height, fname);
  }

  public static int embImage_simulate(EmbPattern pattern, float width, float height, String fname) {
    return libembroideryJNI.embImage_simulate(EmbPattern.getCPtr(pattern), pattern, width, height, fname);
  }

  public static int render_postscript(EmbPattern pattern, EmbImage image) {
    return libembroideryJNI.render_postscript(EmbPattern.getCPtr(pattern), pattern, EmbImage.getCPtr(image), image);
  }

  public static void testMain(int level) {
    libembroideryJNI.testMain(level);
  }

  public static int convert(String inf, String outf) {
    return libembroideryJNI.convert(inf, outf);
  }

  public static int hus_compress(String input, int size, String output, SWIGTYPE_p_int out_size) {
    return libembroideryJNI.hus_compress(input, size, output, SWIGTYPE_p_int.getCPtr(out_size));
  }

  public static int hus_decompress(String input, int size, String output, SWIGTYPE_p_int out_size) {
    return libembroideryJNI.hus_decompress(input, size, output, SWIGTYPE_p_int.getCPtr(out_size));
  }

  public static char isArcClockwise(EmbArc arc) {
    return libembroideryJNI.isArcClockwise(EmbArc.getCPtr(arc), arc);
  }

  public static void getArcCenter(EmbArc arc, EmbVector arcCenter) {
    libembroideryJNI.getArcCenter(EmbArc.getCPtr(arc), arc, EmbVector.getCPtr(arcCenter), arcCenter);
  }

  public static char getArcDataFromBulge(double bulge, EmbArc arc, SWIGTYPE_p_double arcCenterX, SWIGTYPE_p_double arcCenterY, SWIGTYPE_p_double radius, SWIGTYPE_p_double diameter, SWIGTYPE_p_double chord, SWIGTYPE_p_double chordMidX, SWIGTYPE_p_double chordMidY, SWIGTYPE_p_double sagitta, SWIGTYPE_p_double apothem, SWIGTYPE_p_double incAngleInDegrees, String clockwise) {
    return libembroideryJNI.getArcDataFromBulge(bulge, EmbArc.getCPtr(arc), arc, SWIGTYPE_p_double.getCPtr(arcCenterX), SWIGTYPE_p_double.getCPtr(arcCenterY), SWIGTYPE_p_double.getCPtr(radius), SWIGTYPE_p_double.getCPtr(diameter), SWIGTYPE_p_double.getCPtr(chord), SWIGTYPE_p_double.getCPtr(chordMidX), SWIGTYPE_p_double.getCPtr(chordMidY), SWIGTYPE_p_double.getCPtr(sagitta), SWIGTYPE_p_double.getCPtr(apothem), SWIGTYPE_p_double.getCPtr(incAngleInDegrees), clockwise);
  }

  public static int getCircleCircleIntersections(EmbCircle c0, EmbCircle c1, EmbVector v0, EmbVector v1) {
    return libembroideryJNI.getCircleCircleIntersections(EmbCircle.getCPtr(c0), c0, EmbCircle.getCPtr(c1), c1, EmbVector.getCPtr(v0), v0, EmbVector.getCPtr(v1), v1);
  }

  public static int getCircleTangentPoints(EmbCircle c, EmbVector p, EmbVector v0, EmbVector v1) {
    return libembroideryJNI.getCircleTangentPoints(EmbCircle.getCPtr(c), c, EmbVector.getCPtr(p), p, EmbVector.getCPtr(v0), v0, EmbVector.getCPtr(v1), v1);
  }

  public static EmbColor embColor_make(short r, short g, short b) {
    return new EmbColor(libembroideryJNI.embColor_make(r, g, b), true);
  }

  public static EmbColor embColor_create(short r, short g, short b) {
    long cPtr = libembroideryJNI.embColor_create(r, g, b);
    return (cPtr == 0) ? null : new EmbColor(cPtr, false);
  }

  public static EmbColor embColor_fromHexStr(String val) {
    return new EmbColor(libembroideryJNI.embColor_fromHexStr(val), true);
  }

  public static int embColor_distance(EmbColor a, EmbColor b) {
    return libembroideryJNI.embColor_distance(EmbColor.getCPtr(a), a, EmbColor.getCPtr(b), b);
  }

  public static EmbImage embImage_create(int arg0, int arg1) {
    long cPtr = libembroideryJNI.embImage_create(arg0, arg1);
    return (cPtr == 0) ? null : new EmbImage(cPtr, false);
  }

  public static void embImage_free(EmbImage image) {
    libembroideryJNI.embImage_free(EmbImage.getCPtr(image), image);
  }

  public static double embEllipse_diameterX(EmbEllipse ellipse) {
    return libembroideryJNI.embEllipse_diameterX(EmbEllipse.getCPtr(ellipse), ellipse);
  }

  public static double embEllipse_diameterY(EmbEllipse ellipse) {
    return libembroideryJNI.embEllipse_diameterY(EmbEllipse.getCPtr(ellipse), ellipse);
  }

  public static double embEllipse_width(EmbEllipse ellipse) {
    return libembroideryJNI.embEllipse_width(EmbEllipse.getCPtr(ellipse), ellipse);
  }

  public static double embEllipse_height(EmbEllipse ellipse) {
    return libembroideryJNI.embEllipse_height(EmbEllipse.getCPtr(ellipse), ellipse);
  }

  public static EmbEllipseObject embEllipseObject_make(double cx, double cy, double rx, double ry) {
    return new EmbEllipseObject(libembroideryJNI.embEllipseObject_make(cx, cy, rx, ry), true);
  }

  public static int threadColor(String arg0, int brand) {
    return libembroideryJNI.threadColor(arg0, brand);
  }

  public static int threadColorNum(long color, int brand) {
    return libembroideryJNI.threadColorNum(color, brand);
  }

  public static String threadColorName(long color, int brand) {
    return libembroideryJNI.threadColorName(color, brand);
  }

  public static void embTime_initNow(EmbTime t) {
    libembroideryJNI.embTime_initNow(EmbTime.getCPtr(t), t);
  }

  public static EmbTime embTime_time(EmbTime t) {
    return new EmbTime(libembroideryJNI.embTime_time(EmbTime.getCPtr(t), t), true);
  }

  public static EmbSettings embSettings_init() {
    return new EmbSettings(libembroideryJNI.embSettings_init(), true);
  }

  public static EmbVector embSettings_home(EmbSettings settings) {
    return new EmbVector(libembroideryJNI.embSettings_home(EmbSettings.getCPtr(settings), settings), true);
  }

  public static void embSettings_setHome(EmbSettings settings, EmbVector point) {
    libembroideryJNI.embSettings_setHome(EmbSettings.getCPtr(settings), settings, EmbVector.getCPtr(point), point);
  }

  public static void embSatinOutline_generateSatinOutline(EmbArray_ lines, double thickness, EmbSatinOutline result) {
    libembroideryJNI.embSatinOutline_generateSatinOutline(EmbArray_.getCPtr(lines), lines, thickness, EmbSatinOutline.getCPtr(result), result);
  }

  public static EmbArray_ embSatinOutline_renderStitches(EmbSatinOutline result, double density) {
    long cPtr = libembroideryJNI.embSatinOutline_renderStitches(EmbSatinOutline.getCPtr(result), result, density);
    return (cPtr == 0) ? null : new EmbArray_(cPtr, false);
  }

  public static EmbPattern embPattern_create() {
    long cPtr = libembroideryJNI.embPattern_create();
    return (cPtr == 0) ? null : new EmbPattern(cPtr, false);
  }

  public static void embPattern_hideStitchesOverLength(EmbPattern p, int length) {
    libembroideryJNI.embPattern_hideStitchesOverLength(EmbPattern.getCPtr(p), p, length);
  }

  public static void embPattern_fixColorCount(EmbPattern p) {
    libembroideryJNI.embPattern_fixColorCount(EmbPattern.getCPtr(p), p);
  }

  public static int embPattern_addThread(EmbPattern p, EmbThread thread) {
    return libembroideryJNI.embPattern_addThread(EmbPattern.getCPtr(p), p, EmbThread.getCPtr(thread), thread);
  }

  public static void embPattern_addStitchAbs(EmbPattern p, double x, double y, int flags, int isAutoColorIndex) {
    libembroideryJNI.embPattern_addStitchAbs(EmbPattern.getCPtr(p), p, x, y, flags, isAutoColorIndex);
  }

  public static void embPattern_addStitchRel(EmbPattern p, double dx, double dy, int flags, int isAutoColorIndex) {
    libembroideryJNI.embPattern_addStitchRel(EmbPattern.getCPtr(p), p, dx, dy, flags, isAutoColorIndex);
  }

  public static void embPattern_changeColor(EmbPattern p, int index) {
    libembroideryJNI.embPattern_changeColor(EmbPattern.getCPtr(p), p, index);
  }

  public static void embPattern_free(EmbPattern p) {
    libembroideryJNI.embPattern_free(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_scale(EmbPattern p, double scale) {
    libembroideryJNI.embPattern_scale(EmbPattern.getCPtr(p), p, scale);
  }

  public static EmbRect embPattern_calcBoundingBox(EmbPattern p) {
    return new EmbRect(libembroideryJNI.embPattern_calcBoundingBox(EmbPattern.getCPtr(p), p), true);
  }

  public static void embPattern_flipHorizontal(EmbPattern p) {
    libembroideryJNI.embPattern_flipHorizontal(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_flipVertical(EmbPattern p) {
    libembroideryJNI.embPattern_flipVertical(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_flip(EmbPattern p, int horz, int vert) {
    libembroideryJNI.embPattern_flip(EmbPattern.getCPtr(p), p, horz, vert);
  }

  public static void embPattern_combineJumpStitches(EmbPattern p) {
    libembroideryJNI.embPattern_combineJumpStitches(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_correctForMaxStitchLength(EmbPattern p, double maxStitchLength, double maxJumpLength) {
    libembroideryJNI.embPattern_correctForMaxStitchLength(EmbPattern.getCPtr(p), p, maxStitchLength, maxJumpLength);
  }

  public static void embPattern_center(EmbPattern p) {
    libembroideryJNI.embPattern_center(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_loadExternalColorFile(EmbPattern p, String fileName) {
    libembroideryJNI.embPattern_loadExternalColorFile(EmbPattern.getCPtr(p), p, fileName);
  }

  public static void embPattern_convertGeometry(EmbPattern p) {
    libembroideryJNI.embPattern_convertGeometry(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_designDetails(EmbPattern p) {
    libembroideryJNI.embPattern_designDetails(EmbPattern.getCPtr(p), p);
  }

  public static EmbPattern embPattern_combine(EmbPattern p1, EmbPattern p2) {
    long cPtr = libembroideryJNI.embPattern_combine(EmbPattern.getCPtr(p1), p1, EmbPattern.getCPtr(p2), p2);
    return (cPtr == 0) ? null : new EmbPattern(cPtr, false);
  }

  public static int embPattern_color_count(EmbPattern pattern, EmbColor startColor) {
    return libembroideryJNI.embPattern_color_count(EmbPattern.getCPtr(pattern), pattern, EmbColor.getCPtr(startColor), startColor);
  }

  public static void embPattern_end(EmbPattern p) {
    libembroideryJNI.embPattern_end(EmbPattern.getCPtr(p), p);
  }

  public static void embPattern_addCircleObjectAbs(EmbPattern p, double cx, double cy, double r) {
    libembroideryJNI.embPattern_addCircleObjectAbs(EmbPattern.getCPtr(p), p, cx, cy, r);
  }

  public static void embPattern_addEllipseObjectAbs(EmbPattern p, double cx, double cy, double rx, double ry) {
    libembroideryJNI.embPattern_addEllipseObjectAbs(EmbPattern.getCPtr(p), p, cx, cy, rx, ry);
  }

  public static void embPattern_addLineObjectAbs(EmbPattern p, double x1, double y1, double x2, double y2) {
    libembroideryJNI.embPattern_addLineObjectAbs(EmbPattern.getCPtr(p), p, x1, y1, x2, y2);
  }

  public static void embPattern_addPathObjectAbs(EmbPattern p, EmbPathObject obj) {
    libembroideryJNI.embPattern_addPathObjectAbs(EmbPattern.getCPtr(p), p, EmbPathObject.getCPtr(obj), obj);
  }

  public static void embPattern_addPointObjectAbs(EmbPattern p, double x, double y) {
    libembroideryJNI.embPattern_addPointObjectAbs(EmbPattern.getCPtr(p), p, x, y);
  }

  public static void embPattern_addPolygonObjectAbs(EmbPattern p, EmbPolygonObject obj) {
    libembroideryJNI.embPattern_addPolygonObjectAbs(EmbPattern.getCPtr(p), p, EmbPolygonObject.getCPtr(obj), obj);
  }

  public static void embPattern_addPolylineObjectAbs(EmbPattern p, EmbPolylineObject obj) {
    libembroideryJNI.embPattern_addPolylineObjectAbs(EmbPattern.getCPtr(p), p, EmbPolylineObject.getCPtr(obj), obj);
  }

  public static void embPattern_addRectObjectAbs(EmbPattern p, double x, double y, double w, double h) {
    libembroideryJNI.embPattern_addRectObjectAbs(EmbPattern.getCPtr(p), p, x, y, w, h);
  }

  public static void embPattern_copyStitchListToPolylines(EmbPattern pattern) {
    libembroideryJNI.embPattern_copyStitchListToPolylines(EmbPattern.getCPtr(pattern), pattern);
  }

  public static void embPattern_copyPolylinesToStitchList(EmbPattern pattern) {
    libembroideryJNI.embPattern_copyPolylinesToStitchList(EmbPattern.getCPtr(pattern), pattern);
  }

  public static void embPattern_moveStitchListToPolylines(EmbPattern pattern) {
    libembroideryJNI.embPattern_moveStitchListToPolylines(EmbPattern.getCPtr(pattern), pattern);
  }

  public static void embPattern_movePolylinesToStitchList(EmbPattern pattern) {
    libembroideryJNI.embPattern_movePolylinesToStitchList(EmbPattern.getCPtr(pattern), pattern);
  }

  public static char embPattern_read(EmbPattern pattern, String fileName, int format) {
    return libembroideryJNI.embPattern_read(EmbPattern.getCPtr(pattern), pattern, fileName, format);
  }

  public static char embPattern_write(EmbPattern pattern, String fileName, int format) {
    return libembroideryJNI.embPattern_write(EmbPattern.getCPtr(pattern), pattern, fileName, format);
  }

  public static char embPattern_readAuto(EmbPattern pattern, String fileName) {
    return libembroideryJNI.embPattern_readAuto(EmbPattern.getCPtr(pattern), pattern, fileName);
  }

  public static char embPattern_writeAuto(EmbPattern pattern, String fileName) {
    return libembroideryJNI.embPattern_writeAuto(EmbPattern.getCPtr(pattern), pattern, fileName);
  }

  public static void report(int result, String label) {
    libembroideryJNI.report(result, label);
  }

  public static int full_test_matrix(String fname) {
    return libembroideryJNI.full_test_matrix(fname);
  }

  public static void setFormatTable(EmbFormatList value) {
    libembroideryJNI.formatTable_set(EmbFormatList.getCPtr(value), value);
  }

  public static EmbFormatList getFormatTable() {
    long cPtr = libembroideryJNI.formatTable_get();
    return (cPtr == 0) ? null : new EmbFormatList(cPtr, false);
  }

  public static int getPecThreadCount() {
    return libembroideryJNI.pecThreadCount_get();
  }

  public static int getShvThreadCount() {
    return libembroideryJNI.shvThreadCount_get();
  }

  public static double getEmbConstantPi() {
    return libembroideryJNI.embConstantPi_get();
  }

  public static EmbThread getHusThreads() {
    long cPtr = libembroideryJNI.husThreads_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static EmbThread getJefThreads() {
    long cPtr = libembroideryJNI.jefThreads_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static EmbThread getShvThreads() {
    long cPtr = libembroideryJNI.shvThreads_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static EmbThread getPcmThreads() {
    long cPtr = libembroideryJNI.pcmThreads_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static EmbThread getPecThreads() {
    long cPtr = libembroideryJNI.pecThreads_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static SWIGTYPE_p_a_3__unsigned_char get_dxfColorTable() {
    long cPtr = libembroideryJNI._dxfColorTable_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a_3__unsigned_char(cPtr, false);
  }

  public static void setBlack_thread(EmbThread value) {
    libembroideryJNI.black_thread_set(EmbThread.getCPtr(value), value);
  }

  public static EmbThread getBlack_thread() {
    long cPtr = libembroideryJNI.black_thread_get();
    return (cPtr == 0) ? null : new EmbThread(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char getCsd_decryptArray() {
    long cPtr = libembroideryJNI.csd_decryptArray_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char getMax_header() {
    long cPtr = libembroideryJNI.max_header_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_a_48__char getImageWithFrame() {
    long cPtr = libembroideryJNI.imageWithFrame_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_a_48__char(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char getVipDecodingTable() {
    long cPtr = libembroideryJNI.vipDecodingTable_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void setEmb_error(int value) {
    libembroideryJNI.emb_error_set(value);
  }

  public static int getEmb_error() {
    return libembroideryJNI.emb_error_get();
  }

  public static void setEmb_verbose(int value) {
    libembroideryJNI.emb_verbose_set(value);
  }

  public static int getEmb_verbose() {
    return libembroideryJNI.emb_verbose_get();
  }

}
