# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libembroidery
else:
    import _libembroidery

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NORMAL = _libembroidery.NORMAL
JUMP = _libembroidery.JUMP
TRIM = _libembroidery.TRIM
STOP = _libembroidery.STOP
SEQUIN = _libembroidery.SEQUIN
END = _libembroidery.END
EMB_FORMAT_100 = _libembroidery.EMB_FORMAT_100
EMB_FORMAT_10O = _libembroidery.EMB_FORMAT_10O
EMB_FORMAT_ART = _libembroidery.EMB_FORMAT_ART
EMB_FORMAT_BMC = _libembroidery.EMB_FORMAT_BMC
EMB_FORMAT_BRO = _libembroidery.EMB_FORMAT_BRO
EMB_FORMAT_CND = _libembroidery.EMB_FORMAT_CND
EMB_FORMAT_COL = _libembroidery.EMB_FORMAT_COL
EMB_FORMAT_CSD = _libembroidery.EMB_FORMAT_CSD
EMB_FORMAT_CSV = _libembroidery.EMB_FORMAT_CSV
EMB_FORMAT_DAT = _libembroidery.EMB_FORMAT_DAT
EMB_FORMAT_DEM = _libembroidery.EMB_FORMAT_DEM
EMB_FORMAT_DSB = _libembroidery.EMB_FORMAT_DSB
EMB_FORMAT_DST = _libembroidery.EMB_FORMAT_DST
EMB_FORMAT_DSZ = _libembroidery.EMB_FORMAT_DSZ
EMB_FORMAT_DXF = _libembroidery.EMB_FORMAT_DXF
EMB_FORMAT_EDR = _libembroidery.EMB_FORMAT_EDR
EMB_FORMAT_EMD = _libembroidery.EMB_FORMAT_EMD
EMB_FORMAT_EXP = _libembroidery.EMB_FORMAT_EXP
EMB_FORMAT_EXY = _libembroidery.EMB_FORMAT_EXY
EMB_FORMAT_EYS = _libembroidery.EMB_FORMAT_EYS
EMB_FORMAT_FXY = _libembroidery.EMB_FORMAT_FXY
EMB_FORMAT_GC = _libembroidery.EMB_FORMAT_GC
EMB_FORMAT_GNC = _libembroidery.EMB_FORMAT_GNC
EMB_FORMAT_GT = _libembroidery.EMB_FORMAT_GT
EMB_FORMAT_HUS = _libembroidery.EMB_FORMAT_HUS
EMB_FORMAT_INB = _libembroidery.EMB_FORMAT_INB
EMB_FORMAT_INF = _libembroidery.EMB_FORMAT_INF
EMB_FORMAT_JEF = _libembroidery.EMB_FORMAT_JEF
EMB_FORMAT_KSM = _libembroidery.EMB_FORMAT_KSM
EMB_FORMAT_MAX = _libembroidery.EMB_FORMAT_MAX
EMB_FORMAT_MIT = _libembroidery.EMB_FORMAT_MIT
EMB_FORMAT_NEW = _libembroidery.EMB_FORMAT_NEW
EMB_FORMAT_OFM = _libembroidery.EMB_FORMAT_OFM
EMB_FORMAT_PCD = _libembroidery.EMB_FORMAT_PCD
EMB_FORMAT_PCM = _libembroidery.EMB_FORMAT_PCM
EMB_FORMAT_PCQ = _libembroidery.EMB_FORMAT_PCQ
EMB_FORMAT_PCS = _libembroidery.EMB_FORMAT_PCS
EMB_FORMAT_PEC = _libembroidery.EMB_FORMAT_PEC
EMB_FORMAT_PEL = _libembroidery.EMB_FORMAT_PEL
EMB_FORMAT_PEM = _libembroidery.EMB_FORMAT_PEM
EMB_FORMAT_PES = _libembroidery.EMB_FORMAT_PES
EMB_FORMAT_PHB = _libembroidery.EMB_FORMAT_PHB
EMB_FORMAT_PHC = _libembroidery.EMB_FORMAT_PHC
EMB_FORMAT_PLT = _libembroidery.EMB_FORMAT_PLT
EMB_FORMAT_RGB = _libembroidery.EMB_FORMAT_RGB
EMB_FORMAT_SEW = _libembroidery.EMB_FORMAT_SEW
EMB_FORMAT_SHV = _libembroidery.EMB_FORMAT_SHV
EMB_FORMAT_SST = _libembroidery.EMB_FORMAT_SST
EMB_FORMAT_STX = _libembroidery.EMB_FORMAT_STX
EMB_FORMAT_SVG = _libembroidery.EMB_FORMAT_SVG
EMB_FORMAT_T01 = _libembroidery.EMB_FORMAT_T01
EMB_FORMAT_T09 = _libembroidery.EMB_FORMAT_T09
EMB_FORMAT_TAP = _libembroidery.EMB_FORMAT_TAP
EMB_FORMAT_THR = _libembroidery.EMB_FORMAT_THR
EMB_FORMAT_TXT = _libembroidery.EMB_FORMAT_TXT
EMB_FORMAT_U00 = _libembroidery.EMB_FORMAT_U00
EMB_FORMAT_U01 = _libembroidery.EMB_FORMAT_U01
EMB_FORMAT_VIP = _libembroidery.EMB_FORMAT_VIP
EMB_FORMAT_VP3 = _libembroidery.EMB_FORMAT_VP3
EMB_FORMAT_XXX = _libembroidery.EMB_FORMAT_XXX
EMB_FORMAT_ZSK = _libembroidery.EMB_FORMAT_ZSK
Arc_Polyester = _libembroidery.Arc_Polyester
Arc_Rayon = _libembroidery.Arc_Rayon
CoatsAndClark_Rayon = _libembroidery.CoatsAndClark_Rayon
Exquisite_Polyester = _libembroidery.Exquisite_Polyester
Fufu_Polyester = _libembroidery.Fufu_Polyester
Fufu_Rayon = _libembroidery.Fufu_Rayon
Hemingworth_Polyester = _libembroidery.Hemingworth_Polyester
Isacord_Polyester = _libembroidery.Isacord_Polyester
Isafil_Rayon = _libembroidery.Isafil_Rayon
Marathon_Polyester = _libembroidery.Marathon_Polyester
Marathon_Rayon = _libembroidery.Marathon_Rayon
Madeira_Polyester = _libembroidery.Madeira_Polyester
Madeira_Rayon = _libembroidery.Madeira_Rayon
Metro_Polyester = _libembroidery.Metro_Polyester
Pantone = _libembroidery.Pantone
RobisonAnton_Polyester = _libembroidery.RobisonAnton_Polyester
RobisonAnton_Rayon = _libembroidery.RobisonAnton_Rayon
Sigma_Polyester = _libembroidery.Sigma_Polyester
Sulky_Rayon = _libembroidery.Sulky_Rayon
ThreadArt_Rayon = _libembroidery.ThreadArt_Rayon
ThreadArt_Polyester = _libembroidery.ThreadArt_Polyester
ThreaDelight_Polyester = _libembroidery.ThreaDelight_Polyester
Z102_Isacord_Polyester = _libembroidery.Z102_Isacord_Polyester
SVG_Colors = _libembroidery.SVG_Colors
hus_thread = _libembroidery.hus_thread
jef_thread = _libembroidery.jef_thread
pcm_thread = _libembroidery.pcm_thread
pec_thread = _libembroidery.pec_thread
shv_thread = _libembroidery.shv_thread
dxf_color = _libembroidery.dxf_color
EMB_ARC = _libembroidery.EMB_ARC
EMB_CIRCLE = _libembroidery.EMB_CIRCLE
EMB_ELLIPSE = _libembroidery.EMB_ELLIPSE
EMB_FLAG = _libembroidery.EMB_FLAG
EMB_LINE = _libembroidery.EMB_LINE
EMB_PATH = _libembroidery.EMB_PATH
EMB_POINT = _libembroidery.EMB_POINT
EMB_POLYGON = _libembroidery.EMB_POLYGON
EMB_POLYLINE = _libembroidery.EMB_POLYLINE
EMB_RECT = _libembroidery.EMB_RECT
EMB_SPLINE = _libembroidery.EMB_SPLINE
EMB_STITCH = _libembroidery.EMB_STITCH
EMB_THREAD = _libembroidery.EMB_THREAD
EMB_VECTOR = _libembroidery.EMB_VECTOR
EMB_CHAR = _libembroidery.EMB_CHAR
EMB_ARRAY = _libembroidery.EMB_ARRAY
EMBFORMAT_UNSUPPORTED = _libembroidery.EMBFORMAT_UNSUPPORTED
EMBFORMAT_STITCHONLY = _libembroidery.EMBFORMAT_STITCHONLY
EMBFORMAT_OBJECTONLY = _libembroidery.EMBFORMAT_OBJECTONLY
EMBFORMAT_STCHANDOBJ = _libembroidery.EMBFORMAT_STCHANDOBJ
numberOfFormats = _libembroidery.numberOfFormats
CHUNK_SIZE = _libembroidery.CHUNK_SIZE
EMBFORMAT_MAXEXT = _libembroidery.EMBFORMAT_MAXEXT
EMBFORMAT_MAXDESC = _libembroidery.EMBFORMAT_MAXDESC
MAX_STITCHES = _libembroidery.MAX_STITCHES
EMB_BIG_ENDIAN = _libembroidery.EMB_BIG_ENDIAN
EMB_LITTLE_ENDIAN = _libembroidery.EMB_LITTLE_ENDIAN
ENDIAN_HOST = _libembroidery.ENDIAN_HOST
EMB_INT16_BIG = _libembroidery.EMB_INT16_BIG
EMB_INT16_LITTLE = _libembroidery.EMB_INT16_LITTLE
EMB_INT32_BIG = _libembroidery.EMB_INT32_BIG
EMB_INT32_LITTLE = _libembroidery.EMB_INT32_LITTLE
CompoundFileSector_MaxRegSector = _libembroidery.CompoundFileSector_MaxRegSector
CompoundFileSector_DIFAT_Sector = _libembroidery.CompoundFileSector_DIFAT_Sector
CompoundFileSector_FAT_Sector = _libembroidery.CompoundFileSector_FAT_Sector
CompoundFileSector_EndOfChain = _libembroidery.CompoundFileSector_EndOfChain
CompoundFileSector_FreeSector = _libembroidery.CompoundFileSector_FreeSector
ObjectTypeUnknown = _libembroidery.ObjectTypeUnknown
ObjectTypeStorage = _libembroidery.ObjectTypeStorage
ObjectTypeStream = _libembroidery.ObjectTypeStream
ObjectTypeRootEntry = _libembroidery.ObjectTypeRootEntry
CompoundFileStreamId_MaxRegularStreamId = _libembroidery.CompoundFileStreamId_MaxRegularStreamId
CompoundFileStreamId_NoStream = _libembroidery.CompoundFileStreamId_NoStream
class EmbColor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_libembroidery.EmbColor_r_get, _libembroidery.EmbColor_r_set)
    g = property(_libembroidery.EmbColor_g_get, _libembroidery.EmbColor_g_set)
    b = property(_libembroidery.EmbColor_b_get, _libembroidery.EmbColor_b_set)

    def __init__(self):
        _libembroidery.EmbColor_swiginit(self, _libembroidery.new_EmbColor())
    __swig_destroy__ = _libembroidery.delete_EmbColor

# Register EmbColor in _libembroidery:
_libembroidery.EmbColor_swigregister(EmbColor)

class EmbVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_libembroidery.EmbVector_x_get, _libembroidery.EmbVector_x_set)
    y = property(_libembroidery.EmbVector_y_get, _libembroidery.EmbVector_y_set)

    def __init__(self):
        _libembroidery.EmbVector_swiginit(self, _libembroidery.new_EmbVector())
    __swig_destroy__ = _libembroidery.delete_EmbVector

# Register EmbVector in _libembroidery:
_libembroidery.EmbVector_swigregister(EmbVector)

class EmbPointObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    point = property(_libembroidery.EmbPointObject_point_get, _libembroidery.EmbPointObject_point_set)
    lineType = property(_libembroidery.EmbPointObject_lineType_get, _libembroidery.EmbPointObject_lineType_set)
    color = property(_libembroidery.EmbPointObject_color_get, _libembroidery.EmbPointObject_color_set)

    def __init__(self):
        _libembroidery.EmbPointObject_swiginit(self, _libembroidery.new_EmbPointObject())
    __swig_destroy__ = _libembroidery.delete_EmbPointObject

# Register EmbPointObject in _libembroidery:
_libembroidery.EmbPointObject_swigregister(EmbPointObject)

class EmbLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_libembroidery.EmbLine_start_get, _libembroidery.EmbLine_start_set)
    end = property(_libembroidery.EmbLine_end_get, _libembroidery.EmbLine_end_set)

    def __init__(self):
        _libembroidery.EmbLine_swiginit(self, _libembroidery.new_EmbLine())
    __swig_destroy__ = _libembroidery.delete_EmbLine

# Register EmbLine in _libembroidery:
_libembroidery.EmbLine_swigregister(EmbLine)

class EmbLineObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    line = property(_libembroidery.EmbLineObject_line_get, _libembroidery.EmbLineObject_line_set)
    lineType = property(_libembroidery.EmbLineObject_lineType_get, _libembroidery.EmbLineObject_lineType_set)
    color = property(_libembroidery.EmbLineObject_color_get, _libembroidery.EmbLineObject_color_set)

    def __init__(self):
        _libembroidery.EmbLineObject_swiginit(self, _libembroidery.new_EmbLineObject())
    __swig_destroy__ = _libembroidery.delete_EmbLineObject

# Register EmbLineObject in _libembroidery:
_libembroidery.EmbLineObject_swigregister(EmbLineObject)

class EmbLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(_libembroidery.EmbLayer_color_get, _libembroidery.EmbLayer_color_set)
    name = property(_libembroidery.EmbLayer_name_get)

    def __init__(self):
        _libembroidery.EmbLayer_swiginit(self, _libembroidery.new_EmbLayer())
    __swig_destroy__ = _libembroidery.delete_EmbLayer

# Register EmbLayer in _libembroidery:
_libembroidery.EmbLayer_swigregister(EmbLayer)

class EmbPathObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pointList = property(_libembroidery.EmbPathObject_pointList_get, _libembroidery.EmbPathObject_pointList_set)
    flagList = property(_libembroidery.EmbPathObject_flagList_get, _libembroidery.EmbPathObject_flagList_set)
    lineType = property(_libembroidery.EmbPathObject_lineType_get, _libembroidery.EmbPathObject_lineType_set)
    color = property(_libembroidery.EmbPathObject_color_get, _libembroidery.EmbPathObject_color_set)

    def __init__(self):
        _libembroidery.EmbPathObject_swiginit(self, _libembroidery.new_EmbPathObject())
    __swig_destroy__ = _libembroidery.delete_EmbPathObject

# Register EmbPathObject in _libembroidery:
_libembroidery.EmbPathObject_swigregister(EmbPathObject)

class EmbStitch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags = property(_libembroidery.EmbStitch_flags_get, _libembroidery.EmbStitch_flags_set)
    x = property(_libembroidery.EmbStitch_x_get, _libembroidery.EmbStitch_x_set)
    y = property(_libembroidery.EmbStitch_y_get, _libembroidery.EmbStitch_y_set)
    color = property(_libembroidery.EmbStitch_color_get, _libembroidery.EmbStitch_color_set)

    def __init__(self):
        _libembroidery.EmbStitch_swiginit(self, _libembroidery.new_EmbStitch())
    __swig_destroy__ = _libembroidery.delete_EmbStitch

# Register EmbStitch in _libembroidery:
_libembroidery.EmbStitch_swigregister(EmbStitch)

class EmbThread(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(_libembroidery.EmbThread_color_get, _libembroidery.EmbThread_color_set)
    description = property(_libembroidery.EmbThread_description_get, _libembroidery.EmbThread_description_set)
    catalogNumber = property(_libembroidery.EmbThread_catalogNumber_get, _libembroidery.EmbThread_catalogNumber_set)

    def __init__(self):
        _libembroidery.EmbThread_swiginit(self, _libembroidery.new_EmbThread())
    __swig_destroy__ = _libembroidery.delete_EmbThread

# Register EmbThread in _libembroidery:
_libembroidery.EmbThread_swigregister(EmbThread)

class EmbHoop(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_libembroidery.EmbHoop_width_get, _libembroidery.EmbHoop_width_set)
    height = property(_libembroidery.EmbHoop_height_get, _libembroidery.EmbHoop_height_set)

    def __init__(self):
        _libembroidery.EmbHoop_swiginit(self, _libembroidery.new_EmbHoop())
    __swig_destroy__ = _libembroidery.delete_EmbHoop

# Register EmbHoop in _libembroidery:
_libembroidery.EmbHoop_swigregister(EmbHoop)

class thread_color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_libembroidery.thread_color_name_get, _libembroidery.thread_color_name_set)
    hex_code = property(_libembroidery.thread_color_hex_code_get, _libembroidery.thread_color_hex_code_set)
    manufacturer_code = property(_libembroidery.thread_color_manufacturer_code_get, _libembroidery.thread_color_manufacturer_code_set)

    def __init__(self):
        _libembroidery.thread_color_swiginit(self, _libembroidery.new_thread_color())
    __swig_destroy__ = _libembroidery.delete_thread_color

# Register thread_color in _libembroidery:
_libembroidery.thread_color_swigregister(thread_color)

class EmbTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_libembroidery.EmbTime_year_get, _libembroidery.EmbTime_year_set)
    month = property(_libembroidery.EmbTime_month_get, _libembroidery.EmbTime_month_set)
    day = property(_libembroidery.EmbTime_day_get, _libembroidery.EmbTime_day_set)
    hour = property(_libembroidery.EmbTime_hour_get, _libembroidery.EmbTime_hour_set)
    minute = property(_libembroidery.EmbTime_minute_get, _libembroidery.EmbTime_minute_set)
    second = property(_libembroidery.EmbTime_second_get, _libembroidery.EmbTime_second_set)

    def __init__(self):
        _libembroidery.EmbTime_swiginit(self, _libembroidery.new_EmbTime())
    __swig_destroy__ = _libembroidery.delete_EmbTime

# Register EmbTime in _libembroidery:
_libembroidery.EmbTime_swigregister(EmbTime)

class EmbEllipse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    centerX = property(_libembroidery.EmbEllipse_centerX_get, _libembroidery.EmbEllipse_centerX_set)
    centerY = property(_libembroidery.EmbEllipse_centerY_get, _libembroidery.EmbEllipse_centerY_set)
    radiusX = property(_libembroidery.EmbEllipse_radiusX_get, _libembroidery.EmbEllipse_radiusX_set)
    radiusY = property(_libembroidery.EmbEllipse_radiusY_get, _libembroidery.EmbEllipse_radiusY_set)

    def __init__(self):
        _libembroidery.EmbEllipse_swiginit(self, _libembroidery.new_EmbEllipse())
    __swig_destroy__ = _libembroidery.delete_EmbEllipse

# Register EmbEllipse in _libembroidery:
_libembroidery.EmbEllipse_swigregister(EmbEllipse)

class EmbArc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_libembroidery.EmbArc_start_get, _libembroidery.EmbArc_start_set)
    mid = property(_libembroidery.EmbArc_mid_get, _libembroidery.EmbArc_mid_set)
    end = property(_libembroidery.EmbArc_end_get, _libembroidery.EmbArc_end_set)

    def __init__(self):
        _libembroidery.EmbArc_swiginit(self, _libembroidery.new_EmbArc())
    __swig_destroy__ = _libembroidery.delete_EmbArc

# Register EmbArc in _libembroidery:
_libembroidery.EmbArc_swigregister(EmbArc)

class EmbArcObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arc = property(_libembroidery.EmbArcObject_arc_get, _libembroidery.EmbArcObject_arc_set)
    lineType = property(_libembroidery.EmbArcObject_lineType_get, _libembroidery.EmbArcObject_lineType_set)
    color = property(_libembroidery.EmbArcObject_color_get, _libembroidery.EmbArcObject_color_set)

    def __init__(self):
        _libembroidery.EmbArcObject_swiginit(self, _libembroidery.new_EmbArcObject())
    __swig_destroy__ = _libembroidery.delete_EmbArcObject

# Register EmbArcObject in _libembroidery:
_libembroidery.EmbArcObject_swigregister(EmbArcObject)

class EmbRect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    top = property(_libembroidery.EmbRect_top_get, _libembroidery.EmbRect_top_set)
    left = property(_libembroidery.EmbRect_left_get, _libembroidery.EmbRect_left_set)
    bottom = property(_libembroidery.EmbRect_bottom_get, _libembroidery.EmbRect_bottom_set)
    right = property(_libembroidery.EmbRect_right_get, _libembroidery.EmbRect_right_set)

    def __init__(self):
        _libembroidery.EmbRect_swiginit(self, _libembroidery.new_EmbRect())
    __swig_destroy__ = _libembroidery.delete_EmbRect

# Register EmbRect in _libembroidery:
_libembroidery.EmbRect_swigregister(EmbRect)

class EmbCircle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_libembroidery.EmbCircle_center_get, _libembroidery.EmbCircle_center_set)
    radius = property(_libembroidery.EmbCircle_radius_get, _libembroidery.EmbCircle_radius_set)

    def __init__(self):
        _libembroidery.EmbCircle_swiginit(self, _libembroidery.new_EmbCircle())
    __swig_destroy__ = _libembroidery.delete_EmbCircle

# Register EmbCircle in _libembroidery:
_libembroidery.EmbCircle_swigregister(EmbCircle)

class EmbCircleObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    circle = property(_libembroidery.EmbCircleObject_circle_get, _libembroidery.EmbCircleObject_circle_set)
    lineType = property(_libembroidery.EmbCircleObject_lineType_get, _libembroidery.EmbCircleObject_lineType_set)
    color = property(_libembroidery.EmbCircleObject_color_get, _libembroidery.EmbCircleObject_color_set)
    count = property(_libembroidery.EmbCircleObject_count_get, _libembroidery.EmbCircleObject_count_set)
    length = property(_libembroidery.EmbCircleObject_length_get, _libembroidery.EmbCircleObject_length_set)

    def __init__(self):
        _libembroidery.EmbCircleObject_swiginit(self, _libembroidery.new_EmbCircleObject())
    __swig_destroy__ = _libembroidery.delete_EmbCircleObject

# Register EmbCircleObject in _libembroidery:
_libembroidery.EmbCircleObject_swigregister(EmbCircleObject)

class EmbRectObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rect = property(_libembroidery.EmbRectObject_rect_get, _libembroidery.EmbRectObject_rect_set)
    rotation = property(_libembroidery.EmbRectObject_rotation_get, _libembroidery.EmbRectObject_rotation_set)
    radius = property(_libembroidery.EmbRectObject_radius_get, _libembroidery.EmbRectObject_radius_set)
    lineType = property(_libembroidery.EmbRectObject_lineType_get, _libembroidery.EmbRectObject_lineType_set)
    color = property(_libembroidery.EmbRectObject_color_get, _libembroidery.EmbRectObject_color_set)

    def __init__(self):
        _libembroidery.EmbRectObject_swiginit(self, _libembroidery.new_EmbRectObject())
    __swig_destroy__ = _libembroidery.delete_EmbRectObject

# Register EmbRectObject in _libembroidery:
_libembroidery.EmbRectObject_swigregister(EmbRectObject)

class EmbPolygonObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pointList = property(_libembroidery.EmbPolygonObject_pointList_get, _libembroidery.EmbPolygonObject_pointList_set)
    lineType = property(_libembroidery.EmbPolygonObject_lineType_get, _libembroidery.EmbPolygonObject_lineType_set)
    color = property(_libembroidery.EmbPolygonObject_color_get, _libembroidery.EmbPolygonObject_color_set)

    def __init__(self):
        _libembroidery.EmbPolygonObject_swiginit(self, _libembroidery.new_EmbPolygonObject())
    __swig_destroy__ = _libembroidery.delete_EmbPolygonObject

# Register EmbPolygonObject in _libembroidery:
_libembroidery.EmbPolygonObject_swigregister(EmbPolygonObject)

class EmbSatinOutline(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    length = property(_libembroidery.EmbSatinOutline_length_get, _libembroidery.EmbSatinOutline_length_set)
    side1 = property(_libembroidery.EmbSatinOutline_side1_get, _libembroidery.EmbSatinOutline_side1_set)
    side2 = property(_libembroidery.EmbSatinOutline_side2_get, _libembroidery.EmbSatinOutline_side2_set)

    def __init__(self):
        _libembroidery.EmbSatinOutline_swiginit(self, _libembroidery.new_EmbSatinOutline())
    __swig_destroy__ = _libembroidery.delete_EmbSatinOutline

# Register EmbSatinOutline in _libembroidery:
_libembroidery.EmbSatinOutline_swigregister(EmbSatinOutline)

class EmbEllipseObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ellipse = property(_libembroidery.EmbEllipseObject_ellipse_get, _libembroidery.EmbEllipseObject_ellipse_set)
    rotation = property(_libembroidery.EmbEllipseObject_rotation_get, _libembroidery.EmbEllipseObject_rotation_set)
    lineType = property(_libembroidery.EmbEllipseObject_lineType_get, _libembroidery.EmbEllipseObject_lineType_set)
    color = property(_libembroidery.EmbEllipseObject_color_get, _libembroidery.EmbEllipseObject_color_set)

    def __init__(self):
        _libembroidery.EmbEllipseObject_swiginit(self, _libembroidery.new_EmbEllipseObject())
    __swig_destroy__ = _libembroidery.delete_EmbEllipseObject

# Register EmbEllipseObject in _libembroidery:
_libembroidery.EmbEllipseObject_swigregister(EmbEllipseObject)

class EmbPolylineObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pointList = property(_libembroidery.EmbPolylineObject_pointList_get, _libembroidery.EmbPolylineObject_pointList_set)
    lineType = property(_libembroidery.EmbPolylineObject_lineType_get, _libembroidery.EmbPolylineObject_lineType_set)
    color = property(_libembroidery.EmbPolylineObject_color_get, _libembroidery.EmbPolylineObject_color_set)

    def __init__(self):
        _libembroidery.EmbPolylineObject_swiginit(self, _libembroidery.new_EmbPolylineObject())
    __swig_destroy__ = _libembroidery.delete_EmbPolylineObject

# Register EmbPolylineObject in _libembroidery:
_libembroidery.EmbPolylineObject_swigregister(EmbPolylineObject)

class EmbSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dstJumpsPerTrim = property(_libembroidery.EmbSettings_dstJumpsPerTrim_get, _libembroidery.EmbSettings_dstJumpsPerTrim_set)
    home = property(_libembroidery.EmbSettings_home_get, _libembroidery.EmbSettings_home_set)

    def __init__(self):
        _libembroidery.EmbSettings_swiginit(self, _libembroidery.new_EmbSettings())
    __swig_destroy__ = _libembroidery.delete_EmbSettings

# Register EmbSettings in _libembroidery:
_libembroidery.EmbSettings_swigregister(EmbSettings)

class EmbBezier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startX = property(_libembroidery.EmbBezier_startX_get, _libembroidery.EmbBezier_startX_set)
    startY = property(_libembroidery.EmbBezier_startY_get, _libembroidery.EmbBezier_startY_set)
    control1X = property(_libembroidery.EmbBezier_control1X_get, _libembroidery.EmbBezier_control1X_set)
    control1Y = property(_libembroidery.EmbBezier_control1Y_get, _libembroidery.EmbBezier_control1Y_set)
    control2X = property(_libembroidery.EmbBezier_control2X_get, _libembroidery.EmbBezier_control2X_set)
    control2Y = property(_libembroidery.EmbBezier_control2Y_get, _libembroidery.EmbBezier_control2Y_set)
    endX = property(_libembroidery.EmbBezier_endX_get, _libembroidery.EmbBezier_endX_set)
    endY = property(_libembroidery.EmbBezier_endY_get, _libembroidery.EmbBezier_endY_set)

    def __init__(self):
        _libembroidery.EmbBezier_swiginit(self, _libembroidery.new_EmbBezier())
    __swig_destroy__ = _libembroidery.delete_EmbBezier

# Register EmbBezier in _libembroidery:
_libembroidery.EmbBezier_swigregister(EmbBezier)

class EmbSplineObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bezier = property(_libembroidery.EmbSplineObject_bezier_get, _libembroidery.EmbSplineObject_bezier_set)
    next = property(_libembroidery.EmbSplineObject_next_get, _libembroidery.EmbSplineObject_next_set)
    lineType = property(_libembroidery.EmbSplineObject_lineType_get, _libembroidery.EmbSplineObject_lineType_set)
    color = property(_libembroidery.EmbSplineObject_color_get, _libembroidery.EmbSplineObject_color_set)

    def __init__(self):
        _libembroidery.EmbSplineObject_swiginit(self, _libembroidery.new_EmbSplineObject())
    __swig_destroy__ = _libembroidery.delete_EmbSplineObject

# Register EmbSplineObject in _libembroidery:
_libembroidery.EmbSplineObject_swigregister(EmbSplineObject)

class L_system(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axiom = property(_libembroidery.L_system_axiom_get, _libembroidery.L_system_axiom_set)
    alphabet = property(_libembroidery.L_system_alphabet_get, _libembroidery.L_system_alphabet_set)
    constants = property(_libembroidery.L_system_constants_get, _libembroidery.L_system_constants_set)
    rules = property(_libembroidery.L_system_rules_get, _libembroidery.L_system_rules_set)

    def __init__(self):
        _libembroidery.L_system_swiginit(self, _libembroidery.new_L_system())
    __swig_destroy__ = _libembroidery.delete_L_system

# Register L_system in _libembroidery:
_libembroidery.L_system_swigregister(L_system)

class EmbImage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pixel_width = property(_libembroidery.EmbImage_pixel_width_get, _libembroidery.EmbImage_pixel_width_set)
    pixel_height = property(_libembroidery.EmbImage_pixel_height_get, _libembroidery.EmbImage_pixel_height_set)
    width = property(_libembroidery.EmbImage_width_get, _libembroidery.EmbImage_width_set)
    height = property(_libembroidery.EmbImage_height_get, _libembroidery.EmbImage_height_set)
    color = property(_libembroidery.EmbImage_color_get, _libembroidery.EmbImage_color_set)
    offset = property(_libembroidery.EmbImage_offset_get, _libembroidery.EmbImage_offset_set)

    def __init__(self):
        _libembroidery.EmbImage_swiginit(self, _libembroidery.new_EmbImage())
    __swig_destroy__ = _libembroidery.delete_EmbImage

# Register EmbImage in _libembroidery:
_libembroidery.EmbImage_swigregister(EmbImage)

class EmbArray_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    arc = property(_libembroidery.EmbArray__arc_get, _libembroidery.EmbArray__arc_set)
    circle = property(_libembroidery.EmbArray__circle_get, _libembroidery.EmbArray__circle_set)
    color = property(_libembroidery.EmbArray__color_get, _libembroidery.EmbArray__color_set)
    ellipse = property(_libembroidery.EmbArray__ellipse_get, _libembroidery.EmbArray__ellipse_set)
    flag = property(_libembroidery.EmbArray__flag_get, _libembroidery.EmbArray__flag_set)
    path = property(_libembroidery.EmbArray__path_get, _libembroidery.EmbArray__path_set)
    point = property(_libembroidery.EmbArray__point_get, _libembroidery.EmbArray__point_set)
    line = property(_libembroidery.EmbArray__line_get, _libembroidery.EmbArray__line_set)
    polygon = property(_libembroidery.EmbArray__polygon_get, _libembroidery.EmbArray__polygon_set)
    polyline = property(_libembroidery.EmbArray__polyline_get, _libembroidery.EmbArray__polyline_set)
    rect = property(_libembroidery.EmbArray__rect_get, _libembroidery.EmbArray__rect_set)
    spline = property(_libembroidery.EmbArray__spline_get, _libembroidery.EmbArray__spline_set)
    stitch = property(_libembroidery.EmbArray__stitch_get, _libembroidery.EmbArray__stitch_set)
    thread = property(_libembroidery.EmbArray__thread_get, _libembroidery.EmbArray__thread_set)
    vector = property(_libembroidery.EmbArray__vector_get, _libembroidery.EmbArray__vector_set)
    count = property(_libembroidery.EmbArray__count_get, _libembroidery.EmbArray__count_set)
    length = property(_libembroidery.EmbArray__length_get, _libembroidery.EmbArray__length_set)
    type = property(_libembroidery.EmbArray__type_get, _libembroidery.EmbArray__type_set)

    def __init__(self):
        _libembroidery.EmbArray__swiginit(self, _libembroidery.new_EmbArray_())
    __swig_destroy__ = _libembroidery.delete_EmbArray_

# Register EmbArray_ in _libembroidery:
_libembroidery.EmbArray__swigregister(EmbArray_)

class EmbPattern(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    settings = property(_libembroidery.EmbPattern_settings_get, _libembroidery.EmbPattern_settings_set)
    hoop = property(_libembroidery.EmbPattern_hoop_get, _libembroidery.EmbPattern_hoop_set)
    stitchList = property(_libembroidery.EmbPattern_stitchList_get, _libembroidery.EmbPattern_stitchList_set)
    threads = property(_libembroidery.EmbPattern_threads_get, _libembroidery.EmbPattern_threads_set)
    arcs = property(_libembroidery.EmbPattern_arcs_get, _libembroidery.EmbPattern_arcs_set)
    circles = property(_libembroidery.EmbPattern_circles_get, _libembroidery.EmbPattern_circles_set)
    ellipses = property(_libembroidery.EmbPattern_ellipses_get, _libembroidery.EmbPattern_ellipses_set)
    lines = property(_libembroidery.EmbPattern_lines_get, _libembroidery.EmbPattern_lines_set)
    paths = property(_libembroidery.EmbPattern_paths_get, _libembroidery.EmbPattern_paths_set)
    points = property(_libembroidery.EmbPattern_points_get, _libembroidery.EmbPattern_points_set)
    polygons = property(_libembroidery.EmbPattern_polygons_get, _libembroidery.EmbPattern_polygons_set)
    polylines = property(_libembroidery.EmbPattern_polylines_get, _libembroidery.EmbPattern_polylines_set)
    rects = property(_libembroidery.EmbPattern_rects_get, _libembroidery.EmbPattern_rects_set)
    splines = property(_libembroidery.EmbPattern_splines_get, _libembroidery.EmbPattern_splines_set)
    currentColorIndex = property(_libembroidery.EmbPattern_currentColorIndex_get, _libembroidery.EmbPattern_currentColorIndex_set)

    def __init__(self):
        _libembroidery.EmbPattern_swiginit(self, _libembroidery.new_EmbPattern())
    __swig_destroy__ = _libembroidery.delete_EmbPattern

# Register EmbPattern in _libembroidery:
_libembroidery.EmbPattern_swigregister(EmbPattern)

class EmbFormatList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    extension = property(_libembroidery.EmbFormatList_extension_get, _libembroidery.EmbFormatList_extension_set)
    description = property(_libembroidery.EmbFormatList_description_get, _libembroidery.EmbFormatList_description_set)
    reader_state = property(_libembroidery.EmbFormatList_reader_state_get, _libembroidery.EmbFormatList_reader_state_set)
    writer_state = property(_libembroidery.EmbFormatList_writer_state_get, _libembroidery.EmbFormatList_writer_state_set)
    type = property(_libembroidery.EmbFormatList_type_get, _libembroidery.EmbFormatList_type_set)
    color_only = property(_libembroidery.EmbFormatList_color_only_get, _libembroidery.EmbFormatList_color_only_set)
    check_for_color_file = property(_libembroidery.EmbFormatList_check_for_color_file_get, _libembroidery.EmbFormatList_check_for_color_file_set)
    write_external_color_file = property(_libembroidery.EmbFormatList_write_external_color_file_get, _libembroidery.EmbFormatList_write_external_color_file_set)

    def __init__(self):
        _libembroidery.EmbFormatList_swiginit(self, _libembroidery.new_EmbFormatList())
    __swig_destroy__ = _libembroidery.delete_EmbFormatList

# Register EmbFormatList in _libembroidery:
_libembroidery.EmbFormatList_swigregister(EmbFormatList)


def lindenmayer_system(L, state, iteration, complete):
    return _libembroidery.lindenmayer_system(L, state, iteration, complete)

def hilbert_curve(pattern, iterations):
    return _libembroidery.hilbert_curve(pattern, iterations)

def emb_identify_format(ending):
    return _libembroidery.emb_identify_format(ending)

def embArray_create(type):
    return _libembroidery.embArray_create(type)

def embArray_resize(g):
    return _libembroidery.embArray_resize(g)

def embArray_copy(dst, src):
    return _libembroidery.embArray_copy(dst, src)

def embArray_addArc(g, arc, lineType, color):
    return _libembroidery.embArray_addArc(g, arc, lineType, color)

def embArray_addCircle(g, circle, lineType, color):
    return _libembroidery.embArray_addCircle(g, circle, lineType, color)

def embArray_addEllipse(g, circle, rotation, lineType, color):
    return _libembroidery.embArray_addEllipse(g, circle, rotation, lineType, color)

def embArray_addFlag(g, flag):
    return _libembroidery.embArray_addFlag(g, flag)

def embArray_addLine(g, line):
    return _libembroidery.embArray_addLine(g, line)

def embArray_addRect(g, rect, lineType, color):
    return _libembroidery.embArray_addRect(g, rect, lineType, color)

def embArray_addPath(g, p):
    return _libembroidery.embArray_addPath(g, p)

def embArray_addPoint(g, p):
    return _libembroidery.embArray_addPoint(g, p)

def embArray_addPolygon(g, p):
    return _libembroidery.embArray_addPolygon(g, p)

def embArray_addPolyline(g, p):
    return _libembroidery.embArray_addPolyline(g, p)

def embArray_addStitch(g, st):
    return _libembroidery.embArray_addStitch(g, st)

def embArray_addThread(g, p):
    return _libembroidery.embArray_addThread(g, p)

def embArray_addVector(g, arg2):
    return _libembroidery.embArray_addVector(g, arg2)

def embArray_free(p):
    return _libembroidery.embArray_free(p)

def embLine_make(x1, y1, x2, y2):
    return _libembroidery.embLine_make(x1, y1, x2, y2)

def embLine_normalVector(line, result, clockwise):
    return _libembroidery.embLine_normalVector(line, result, clockwise)

def embLine_intersectionPoint(line1, line2):
    return _libembroidery.embLine_intersectionPoint(line1, line2)

def embThread_findNearestColor(color, colors, mode):
    return _libembroidery.embThread_findNearestColor(color, colors, mode)

def embThread_findNearestColor_fromThread(color, colors, length):
    return _libembroidery.embThread_findNearestColor_fromThread(color, colors, length)

def embThread_getRandom():
    return _libembroidery.embThread_getRandom()

def embVector_normalize(vector, result):
    return _libembroidery.embVector_normalize(vector, result)

def embVector_multiply(vector, magnitude, result):
    return _libembroidery.embVector_multiply(vector, magnitude, result)

def embVector_add(v1, v2, result):
    return _libembroidery.embVector_add(v1, v2, result)

def embVector_average(v1, v2, result):
    return _libembroidery.embVector_average(v1, v2, result)

def embVector_subtract(v1, v2, result):
    return _libembroidery.embVector_subtract(v1, v2, result)

def embVector_dot(v1, v2):
    return _libembroidery.embVector_dot(v1, v2)

def embVector_cross(v1, v2):
    return _libembroidery.embVector_cross(v1, v2)

def embVector_transpose_product(v1, v2, result):
    return _libembroidery.embVector_transpose_product(v1, v2, result)

def embVector_length(vector):
    return _libembroidery.embVector_length(vector)

def embVector_relativeX(a1, a2, a3):
    return _libembroidery.embVector_relativeX(a1, a2, a3)

def embVector_relativeY(a1, a2, a3):
    return _libembroidery.embVector_relativeY(a1, a2, a3)

def embVector_angle(v):
    return _libembroidery.embVector_angle(v)

def embVector_distance(a, b):
    return _libembroidery.embVector_distance(a, b)

def embVector_unit(angle):
    return _libembroidery.embVector_unit(angle)

def read_ppm_image(fname, a):
    return _libembroidery.read_ppm_image(fname, a)

def write_ppm_image(fname, a):
    return _libembroidery.write_ppm_image(fname, a)

def image_diff(image1, image2):
    return _libembroidery.image_diff(image1, image2)

def render_line(arg1, arg2, arg3):
    return _libembroidery.render_line(arg1, arg2, arg3)

def embImage_render(pattern, width, height, fname):
    return _libembroidery.embImage_render(pattern, width, height, fname)

def embImage_simulate(pattern, width, height, fname):
    return _libembroidery.embImage_simulate(pattern, width, height, fname)

def render_postscript(pattern, image):
    return _libembroidery.render_postscript(pattern, image)

def testMain(level):
    return _libembroidery.testMain(level)

def convert(inf, outf):
    return _libembroidery.convert(inf, outf)

def hus_compress(input, size, output, out_size):
    return _libembroidery.hus_compress(input, size, output, out_size)

def hus_decompress(input, size, output, out_size):
    return _libembroidery.hus_decompress(input, size, output, out_size)

def isArcClockwise(arc):
    return _libembroidery.isArcClockwise(arc)

def getArcCenter(arc, arcCenter):
    return _libembroidery.getArcCenter(arc, arcCenter)

def getArcDataFromBulge(bulge, arc, arcCenterX, arcCenterY, radius, diameter, chord, chordMidX, chordMidY, sagitta, apothem, incAngleInDegrees, clockwise):
    return _libembroidery.getArcDataFromBulge(bulge, arc, arcCenterX, arcCenterY, radius, diameter, chord, chordMidX, chordMidY, sagitta, apothem, incAngleInDegrees, clockwise)

def getCircleCircleIntersections(c0, c1, v0, v1):
    return _libembroidery.getCircleCircleIntersections(c0, c1, v0, v1)

def getCircleTangentPoints(c, p, v0, v1):
    return _libembroidery.getCircleTangentPoints(c, p, v0, v1)

def embColor_make(r, g, b):
    return _libembroidery.embColor_make(r, g, b)

def embColor_create(r, g, b):
    return _libembroidery.embColor_create(r, g, b)

def embColor_fromHexStr(val):
    return _libembroidery.embColor_fromHexStr(val)

def embColor_distance(a, b):
    return _libembroidery.embColor_distance(a, b)

def embImage_create(arg1, arg2):
    return _libembroidery.embImage_create(arg1, arg2)

def embImage_free(image):
    return _libembroidery.embImage_free(image)

def embEllipse_diameterX(ellipse):
    return _libembroidery.embEllipse_diameterX(ellipse)

def embEllipse_diameterY(ellipse):
    return _libembroidery.embEllipse_diameterY(ellipse)

def embEllipse_width(ellipse):
    return _libembroidery.embEllipse_width(ellipse)

def embEllipse_height(ellipse):
    return _libembroidery.embEllipse_height(ellipse)

def embEllipseObject_make(cx, cy, rx, ry):
    return _libembroidery.embEllipseObject_make(cx, cy, rx, ry)

def threadColor(arg1, brand):
    return _libembroidery.threadColor(arg1, brand)

def threadColorNum(color, brand):
    return _libembroidery.threadColorNum(color, brand)

def threadColorName(color, brand):
    return _libembroidery.threadColorName(color, brand)

def embTime_initNow(t):
    return _libembroidery.embTime_initNow(t)

def embTime_time(t):
    return _libembroidery.embTime_time(t)

def embSettings_init():
    return _libembroidery.embSettings_init()

def embSettings_home(settings):
    return _libembroidery.embSettings_home(settings)

def embSettings_setHome(settings, point):
    return _libembroidery.embSettings_setHome(settings, point)

def embSatinOutline_generateSatinOutline(lines, thickness, result):
    return _libembroidery.embSatinOutline_generateSatinOutline(lines, thickness, result)

def embSatinOutline_renderStitches(result, density):
    return _libembroidery.embSatinOutline_renderStitches(result, density)

def embPattern_create():
    return _libembroidery.embPattern_create()

def embPattern_hideStitchesOverLength(p, length):
    return _libembroidery.embPattern_hideStitchesOverLength(p, length)

def embPattern_fixColorCount(p):
    return _libembroidery.embPattern_fixColorCount(p)

def embPattern_addThread(p, thread):
    return _libembroidery.embPattern_addThread(p, thread)

def embPattern_addStitchAbs(p, x, y, flags, isAutoColorIndex):
    return _libembroidery.embPattern_addStitchAbs(p, x, y, flags, isAutoColorIndex)

def embPattern_addStitchRel(p, dx, dy, flags, isAutoColorIndex):
    return _libembroidery.embPattern_addStitchRel(p, dx, dy, flags, isAutoColorIndex)

def embPattern_changeColor(p, index):
    return _libembroidery.embPattern_changeColor(p, index)

def embPattern_free(p):
    return _libembroidery.embPattern_free(p)

def embPattern_scale(p, scale):
    return _libembroidery.embPattern_scale(p, scale)

def embPattern_calcBoundingBox(p):
    return _libembroidery.embPattern_calcBoundingBox(p)

def embPattern_flipHorizontal(p):
    return _libembroidery.embPattern_flipHorizontal(p)

def embPattern_flipVertical(p):
    return _libembroidery.embPattern_flipVertical(p)

def embPattern_flip(p, horz, vert):
    return _libembroidery.embPattern_flip(p, horz, vert)

def embPattern_combineJumpStitches(p):
    return _libembroidery.embPattern_combineJumpStitches(p)

def embPattern_correctForMaxStitchLength(p, maxStitchLength, maxJumpLength):
    return _libembroidery.embPattern_correctForMaxStitchLength(p, maxStitchLength, maxJumpLength)

def embPattern_center(p):
    return _libembroidery.embPattern_center(p)

def embPattern_loadExternalColorFile(p, fileName):
    return _libembroidery.embPattern_loadExternalColorFile(p, fileName)

def embPattern_convertGeometry(p):
    return _libembroidery.embPattern_convertGeometry(p)

def embPattern_designDetails(p):
    return _libembroidery.embPattern_designDetails(p)

def embPattern_combine(p1, p2):
    return _libembroidery.embPattern_combine(p1, p2)

def embPattern_end(p):
    return _libembroidery.embPattern_end(p)

def embPattern_addCircleObjectAbs(p, cx, cy, r):
    return _libembroidery.embPattern_addCircleObjectAbs(p, cx, cy, r)

def embPattern_addEllipseObjectAbs(p, cx, cy, rx, ry):
    return _libembroidery.embPattern_addEllipseObjectAbs(p, cx, cy, rx, ry)

def embPattern_addLineObjectAbs(p, x1, y1, x2, y2):
    return _libembroidery.embPattern_addLineObjectAbs(p, x1, y1, x2, y2)

def embPattern_addPathObjectAbs(p, obj):
    return _libembroidery.embPattern_addPathObjectAbs(p, obj)

def embPattern_addPointObjectAbs(p, x, y):
    return _libembroidery.embPattern_addPointObjectAbs(p, x, y)

def embPattern_addPolygonObjectAbs(p, obj):
    return _libembroidery.embPattern_addPolygonObjectAbs(p, obj)

def embPattern_addPolylineObjectAbs(p, obj):
    return _libembroidery.embPattern_addPolylineObjectAbs(p, obj)

def embPattern_addRectObjectAbs(p, x, y, w, h):
    return _libembroidery.embPattern_addRectObjectAbs(p, x, y, w, h)

def embPattern_copyStitchListToPolylines(pattern):
    return _libembroidery.embPattern_copyStitchListToPolylines(pattern)

def embPattern_copyPolylinesToStitchList(pattern):
    return _libembroidery.embPattern_copyPolylinesToStitchList(pattern)

def embPattern_moveStitchListToPolylines(pattern):
    return _libembroidery.embPattern_moveStitchListToPolylines(pattern)

def embPattern_movePolylinesToStitchList(pattern):
    return _libembroidery.embPattern_movePolylinesToStitchList(pattern)

def embPattern_read(pattern, fileName, format):
    return _libembroidery.embPattern_read(pattern, fileName, format)

def embPattern_write(pattern, fileName, format):
    return _libembroidery.embPattern_write(pattern, fileName, format)

def embPattern_readAuto(pattern, fileName):
    return _libembroidery.embPattern_readAuto(pattern, fileName)

def embPattern_writeAuto(pattern, fileName):
    return _libembroidery.embPattern_writeAuto(pattern, fileName)

def report(result, label):
    return _libembroidery.report(result, label)

def full_test_matrix(fname):
    return _libembroidery.full_test_matrix(fname)

cvar = _libembroidery.cvar
pecThreadCount = cvar.pecThreadCount
shvThreadCount = cvar.shvThreadCount
embConstantPi = cvar.embConstantPi
husThreads = cvar.husThreads
jefThreads = cvar.jefThreads
shvThreads = cvar.shvThreads
pcmThreads = cvar.pcmThreads
pecThreads = cvar.pecThreads
_dxfColorTable = cvar._dxfColorTable
csd_decryptArray = cvar.csd_decryptArray
max_header = cvar.max_header
imageWithFrame = cvar.imageWithFrame
vipDecodingTable = cvar.vipDecodingTable

